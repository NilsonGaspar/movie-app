{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Trailer from './Trailer';\nimport Modal from 'react-modal';\nimport MovieList from './MovieList';\nimport RecommendedMovies from './RecommendedMovies';\nimport './App.css';\nModal.setAppElement('#root');\n\nfunction App() {\n  useEffect(() => {\n    moodBasedMovies();\n  }, []);\n  const API_KEY = \"fb1090731e2fd7eea03536049722f122\";\n  const IMG_URL_LQ = \"https://image.tmdb.org/t/p/w500\";\n  const IMG_URL_HQ = \"https://image.tmdb.org/t/p/original\";\n  const RECOMMENDED_MOVIES_PATH = \"/discover/movie\";\n  const [trailerList, setTrailerList] = useState([]); // TRAILER LIST\n\n  const [showOverlay, setShowOverlay] = useState(\"overlay\");\n  const [modalIsOpen, setmodalIsOpen] = useState(false);\n  const [isUserMoodActive, setIsUserMoodActive] = useState(false);\n  const [recommendedMovieList, setRecommendedMovieList] = useState([]); // TRAILER LIST\n\n  let genre = \"\";\n  let randomYear = \"\";\n  let keyword1 = \"\";\n  let keyword2 = \"\";\n  let keyword3 = \"\";\n  let keyword4 = \"\";\n  let keyword5 = \"\";\n  let userMood;\n  let season;\n  let month;\n  let currentDate = new Date(); // variable to store date\n\n  const customStyles = {\n    content: {\n      top: '35%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      width: '40%',\n      transform: 'translate(-50%, -10%)',\n      textAlign: 'center'\n    },\n    overlay: {\n      backgroundColor: 'rgb(0, 0, 0, .5)'\n    }\n  }; // ARRAYS\n  // --- ANGRY Keywords ---\n  // fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\n\n  const angryKeywords = [\"1721\", \"779\", \"470\", \"10481\", \"192913\", \"14643\", \"3070\", \"9748\"]; // --- HAPPY Keywords ---\n  //happy 231591, love 9673, sports documentary 159290, nature documentary 221355, happiness 154060, family 18035, magic 2343\n\n  const happyKeywords = [\"231591\", \"9673\", \"159290\", \"221355\", \"154060\", \"18035\", \"2343\"]; // entertainer 1491, happy 231591, comedy 248206\n\n  const tiredKeywords = [\"1491\", \"231591\", \"248206\"]; //---------\n  // --- SPRING Keywords ---\n  // spring break 158054, game 18249, party 8508, young adult 206298\n\n  const springKeywords = [\"158054\", \"18249\", \"8508\", \"206298\"]; // --- SUMMER Keywords ---\n  // summer 13088, summer camp 5767, beach 966, resort 10793, family secrets, teenage girl, family relationships\n\n  const summerKeywords = [\"13088\", \"5767\", \"966\", \"10793\", \"6625\", \"10809\", \"10235\"]; // --- WINTER Keywords ---\n  // winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\n\n  const winterKeywords = [\"1442\", \"10794\", \"207317\", \"186466\"]; // --- AUTUMN Keywords ---\n  // autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\n\n  const autumnKeywords = [\"178883\", \"3335\", \"9694\", \"8087\", \"1299\", \"3133\", \"6152\"]; // RANDOM Keywords Holder\n  // Array to store random keywords\n  // Used to merge two arrays together\n\n  let mergedKeywordsHolder = []; // Selected ramdom number from mergedKeywordsHolder array\n\n  let selectedKeywords = []; // -------\n  // HAPPY USER MOOD OPTIONS\n\n  const moodBasedMovies = () => {\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } // Call this fucntion to filter movies\n\n\n    filterMovieKeywords();\n  }; // HAPPY USER MOOD OPTIONS\n\n\n  const happyMood = () => {\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = happyKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = happyKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = happyKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } // Call this fucntion to filter movies\n\n\n    filterMovieKeywords();\n  }; // TIRED USER MOOD OPTIONS\n\n\n  const tiredMood = () => {\n    genre = \"35|10770|53\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } // Call this fucntion to filter movies\n\n\n    filterMovieKeywords();\n  }; // SAD USER MOOD OPTIONS\n\n\n  const sadMood = () => {\n    genre = \"35|10770|53\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } // Call this fucntion to filter movies\n\n\n    filterMovieKeywords();\n  }; // ANGRY USER MOOD OPTIONS\n\n\n  const angryMood = () => {\n    genre = \"28|80|10759|12\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = angryKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = angryKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = angryKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Autumn\") {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = angryKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } // Call this fucntion to filter movies\n\n\n    filterMovieKeywords();\n  }; // FUNCTION TO FILTER ANGRY MOOD MOVIES\n\n\n  function filterMovieKeywords() {\n    // loop to get 5 random values from array angryKeywords and store it in the array randomKeywordsHolder\n    for (var i = 0; i < 5; i++) {\n      var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n\n      while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) {\n        // check if the last value is not the same as the new one\n        pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)];\n      }\n\n      selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n    } // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n\n\n    keyword1 = selectedKeywords[0];\n    keyword2 = selectedKeywords[1];\n    keyword3 = selectedKeywords[2];\n    keyword4 = selectedKeywords[3];\n    keyword5 = selectedKeywords[4]; // Generate random year between 2010 and 2020\n\n    randomYear = getRndInteger(2010, 2020);\n    console.log(\"selected keys \", selectedKeywords);\n    console.log(\"keywords \", keyword1, keyword2, keyword3, keyword4, keyword5);\n    fetchRecommendedMovies();\n  } // FUNCTION TO GENERATE RANDOM YEAR\n\n\n  function getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } // GET VIDEO TRAILER\n\n\n  document.onclick = function (event) {\n    // check for any event that happens in the page\n    const target = event.target; // store the content from the \"event\" into the variable target\n\n    if (target.tagName.toLowerCase() === \"img\") {\n      // change the image name to lower case and check if it is equal to \"img\"\n      console.log(target);\n      const movie_id = target.attributes.id.value; // get movie ID\n\n      console.log(\"Movie ID: \", movie_id);\n\n      const fetchTrailer = async () => {\n        const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n\n        const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n        const data = await response.json();\n        console.log(\"Trailer List: \", data.results);\n        setTrailerList(data.results); // check if there is a trailer available\n\n        if (data.results.length === 0) {\n          console.log(\"No trailer found\");\n          setmodalIsOpen(true);\n          return;\n        }\n      };\n\n      fetchTrailer();\n      setShowOverlay(\"overlay active\");\n    }\n  };\n\n  const fetchRecommendedMovies = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"REC List: \", data.results);\n    console.log(response);\n    setRecommendedMovieList(data.results);\n    console.log(userMood);\n  }; // GET CURRENT MONTH\n\n\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  month = months[currentDate.getMonth()];\n  console.log(\"Month: \" + month); // GET THE RIGHT SEASON\n\n  function getSeason() {\n    if (month === \"December\" || month === \"January\" || month === \"February\") {\n      //console.log(\"Winter\");\n      season = \"Winter\";\n    } else if (month === \"March\" || month === \"April\" || month === \"May\") {\n      //console.log(\"Spring\");\n      season = \"Spring\";\n    } else if (month === \"June\" || month === \"July\" || month === \"August\") {\n      //console.log(\"Summer\");\n      season = \"Summer\";\n    } else {\n      //console.log(\"Autumn\");\n      season = \"Autumn\";\n    }\n\n    return season;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: showOverlay,\n    onClick: () => {\n      setShowOverlay(\"overlay\");\n      setTrailerList([]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spotlight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mood-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"logo-link\",\n    href: \"index.html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }\n  }, \"fastMovie\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-angry\",\n    onClick: () => {\n      angryMood();\n      setIsUserMoodActive(true);\n      {\n        userMood = \"Angry\";\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }\n  }, \"Angry\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-tired\",\n    onClick: () => {\n      tiredMood();\n      setIsUserMoodActive(true);\n      {\n        userMood = \"Tired\";\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }\n  }, \"Tired\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-sad\",\n    onClick: () => {\n      sadMood();\n      setIsUserMoodActive(true);\n      {\n        userMood = \"Sad\";\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 9\n    }\n  }, \"Sad\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-happy\",\n    onClick: () => {\n      happyMood();\n      setIsUserMoodActive(true);\n      {\n        userMood = \"Happy\";\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 9\n    }\n  }, \"Happy\")))), isUserMoodActive && /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }\n  }, \"Recommended For You\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }\n  }, recommendedMovieList.map(movie => /*#__PURE__*/React.createElement(RecommendedMovies, {\n    key: movie.id,\n    title: movie.title,\n    poster: IMG_URL_LQ + movie.poster_path,\n    movie_id: movie.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ads\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require('./img/smallads.gif'),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }\n  }, \"Up Coming\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL: \"/movie/upcoming\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }\n  }, \"Now Playing\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL: \"/movie/now_playing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ads\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require('./img/bigads.jpg'),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }\n  }, \"Popular Movies\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL: \"/movie/popular\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trailer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }\n  }, trailerList.slice(0, 1).map(trailer => /*#__PURE__*/React.createElement(Trailer, {\n    key: trailer.key,\n    trailer_key: trailer.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: () => {\n      setmodalIsOpen(false);\n      setShowOverlay(\"overlay\");\n    },\n    style: customStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 5\n    }\n  }, \"SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js"],"names":["React","useEffect","useState","Trailer","Modal","MovieList","RecommendedMovies","setAppElement","App","moodBasedMovies","API_KEY","IMG_URL_LQ","IMG_URL_HQ","RECOMMENDED_MOVIES_PATH","trailerList","setTrailerList","showOverlay","setShowOverlay","modalIsOpen","setmodalIsOpen","isUserMoodActive","setIsUserMoodActive","recommendedMovieList","setRecommendedMovieList","genre","randomYear","keyword1","keyword2","keyword3","keyword4","keyword5","userMood","season","month","currentDate","Date","customStyles","content","top","left","right","bottom","marginRight","width","transform","textAlign","overlay","backgroundColor","angryKeywords","happyKeywords","tiredKeywords","springKeywords","summerKeywords","winterKeywords","autumnKeywords","mergedKeywordsHolder","selectedKeywords","getSeason","console","log","filterMovieKeywords","happyMood","concat","tiredMood","sadMood","angryMood","i","pickedKeyword","Math","floor","random","length","lastIndexOf","push","getRndInteger","fetchRecommendedMovies","min","max","document","onclick","event","target","tagName","toLowerCase","movie_id","attributes","id","value","fetchTrailer","TRAILER_PATH","response","fetch","data","json","results","months","getMonth","map","movie","title","poster_path","require","slice","trailer","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Trailer from './Trailer';\nimport Modal from 'react-modal';\nimport MovieList from './MovieList';\nimport RecommendedMovies from './RecommendedMovies';\nimport './App.css';\n\nModal.setAppElement('#root');\n\nfunction App() {\n\n  useEffect(()=>{\n    moodBasedMovies();\n  }, [])\n\nconst API_KEY = \"fb1090731e2fd7eea03536049722f122\";\nconst IMG_URL_LQ = \"https://image.tmdb.org/t/p/w500\";\nconst IMG_URL_HQ = \"https://image.tmdb.org/t/p/original\";\nconst RECOMMENDED_MOVIES_PATH = \"/discover/movie\";\n\nconst [trailerList, setTrailerList] = useState([]); // TRAILER LIST\nconst [showOverlay, setShowOverlay] = useState(\"overlay\");\nconst [modalIsOpen, setmodalIsOpen] = useState(false);\nconst [isUserMoodActive, setIsUserMoodActive] = useState(false);\nconst [recommendedMovieList, setRecommendedMovieList] = useState([]); // TRAILER LIST\n\nlet genre = \"\";\nlet randomYear = \"\";\nlet keyword1 = \"\";\nlet keyword2 = \"\";\nlet keyword3 = \"\";\nlet keyword4 = \"\";\nlet keyword5 = \"\";\nlet userMood;\nlet season;\nlet month;\nlet currentDate = new Date(); // variable to store date\n\n\nconst customStyles = {\n  content: {\n    top: '35%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    width: '40%',\n    transform: 'translate(-50%, -10%)',\n    textAlign: 'center',\n  },\n  overlay: {\n    backgroundColor: 'rgb(0, 0, 0, .5)',\n  },\n};\n\n\n\n// ARRAYS\n\n// --- ANGRY Keywords ---\n// fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\nconst angryKeywords = [\"1721\",\"779\",\"470\",\"10481\",\"192913\",\"14643\",\"3070\",\"9748\"];\n// --- HAPPY Keywords ---\n//happy 231591, love 9673, sports documentary 159290, nature documentary 221355, happiness 154060, family 18035, magic 2343\nconst happyKeywords = [\"231591\",\"9673\",\"159290\",\"221355\",\"154060\",\"18035\",\"2343\"];\n\n// entertainer 1491, happy 231591, comedy 248206\nconst tiredKeywords = [\"1491\",\"231591\",\"248206\"];\n\n//---------\n\n\n// --- SPRING Keywords ---\n// spring break 158054, game 18249, party 8508, young adult 206298\nconst springKeywords = [\"158054\",\"18249\",\"8508\",\"206298\"];\n\n// --- SUMMER Keywords ---\n// summer 13088, summer camp 5767, beach 966, resort 10793, family secrets, teenage girl, family relationships\nconst summerKeywords = [\"13088\",\"5767\",\"966\",\"10793\",\"6625\",\"10809\",\"10235\"];\n\n// --- WINTER Keywords ---\n// winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\nconst winterKeywords = [\"1442\",\"10794\",\"207317\",\"186466\"];\n\n// --- AUTUMN Keywords ---\n// autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\nconst autumnKeywords = [\"178883\",\"3335\",\"9694\",\"8087\",\"1299\",\"3133\",\"6152\"];\n\n// RANDOM Keywords Holder\n// Array to store random keywords\n// Used to merge two arrays together\nlet mergedKeywordsHolder = []; \n\n// Selected ramdom number from mergedKeywordsHolder array\nlet selectedKeywords = [];\n\n// -------\n\n\n// HAPPY USER MOOD OPTIONS\nconst moodBasedMovies =() => {\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n\n\n  // CHECK IF IT IS SPRING\n  if (getSeason() === \"Spring\") {\n    console.log(\"It's Spring\");\n    mergedKeywordsHolder = [...happyKeywords] // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else if (getSeason() === \"Summer\") {\n    console.log(\"It's Summer\");\n    mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else if (getSeason() === \"Winter\") {\n    console.log(\"It's winter\");\n    mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else {\n    console.log(\"It's Autumn\");\n    mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n    // Call this fucntion to filter movies\n    filterMovieKeywords();\n}\n\n\n// HAPPY USER MOOD OPTIONS\nconst happyMood =() => {\n    mergedKeywordsHolder = []; // clear the array\n    selectedKeywords = []; // clear the array\n\n  // CHECK IF IT IS SPRING\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = happyKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = happyKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = happyKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n      // Call this fucntion to filter movies\n      filterMovieKeywords();\n}\n\n// TIRED USER MOOD OPTIONS\nconst tiredMood =() => {\n\n  genre = \"35|10770|53\";\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n\n// CHECK IF IT IS SPRING\n  if (getSeason() === \"Spring\") {\n    console.log(\"It's Spring\");\n    mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else if (getSeason() === \"Summer\") {\n    console.log(\"It's Summer\");\n    mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else if (getSeason() === \"Winter\") {\n    console.log(\"It's winter\");\n    mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else {\n    console.log(\"It's Autumn\");\n    mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n    // Call this fucntion to filter movies\n    filterMovieKeywords();\n}\n\n// SAD USER MOOD OPTIONS\nconst sadMood =() => {\n\n  genre = \"35|10770|53\";\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n\n// CHECK IF IT IS SPRING\n  if (getSeason() === \"Spring\") {\n    console.log(\"It's Spring\");\n    mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else if (getSeason() === \"Summer\") {\n    console.log(\"It's Summer\");\n    mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else if (getSeason() === \"Winter\") {\n    console.log(\"It's winter\");\n    mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else {\n    console.log(\"It's Autumn\");\n    mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n    // Call this fucntion to filter movies\n    filterMovieKeywords();\n}\n\n// ANGRY USER MOOD OPTIONS\nconst angryMood = () => {\n\n  genre = \"28|80|10759|12\";\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n\n// CHECK IF IT IS SPRING\n  if (getSeason() === \"Spring\") {\n    console.log(\"It's Spring\");\n    mergedKeywordsHolder = angryKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else if (getSeason() === \"Summer\") {\n    console.log(\"It's Summer\");\n    mergedKeywordsHolder = angryKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else if (getSeason() === \"Winter\") {\n    console.log(\"It's winter\");\n    mergedKeywordsHolder = angryKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  else if (getSeason() === \"Autumn\") {\n    console.log(\"It's Autumn\");\n    mergedKeywordsHolder = angryKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  }\n  // Call this fucntion to filter movies\n  filterMovieKeywords();\n}\n\n\n// FUNCTION TO FILTER ANGRY MOOD MOVIES\nfunction filterMovieKeywords() {\n  // loop to get 5 random values from array angryKeywords and store it in the array randomKeywordsHolder\n  for (var i = 0; i < 5; i++) { \n    var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random()*mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n    while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) { // check if the last value is not the same as the new one\n      pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random()*mergedKeywordsHolder.length)];\n    }\n    selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n}\n  // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n  keyword1 = selectedKeywords[0];\n  keyword2 = selectedKeywords[1];\n  keyword3 = selectedKeywords[2];\n  keyword4 = selectedKeywords[3];\n  keyword5 = selectedKeywords[4];\n\n\n  // Generate random year between 2010 and 2020\n  randomYear = getRndInteger(2010, 2020);\n  console.log(\"selected keys \", selectedKeywords);\n  console.log(\"keywords \",keyword1, keyword2, keyword3, keyword4,keyword5);\n  fetchRecommendedMovies()\n}\n\n\n// FUNCTION TO GENERATE RANDOM YEAR\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n// GET VIDEO TRAILER\ndocument.onclick = function (event) { // check for any event that happens in the page\n  const target = event.target; // store the content from the \"event\" into the variable target\n  if (target.tagName.toLowerCase() === \"img\") { // change the image name to lower case and check if it is equal to \"img\"\n  console.log(target);\n  const movie_id = target.attributes.id.value; // get movie ID\n  console.log(\"Movie ID: \", movie_id);\n  \n  const fetchTrailer = async () => {\n    const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n    const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n    const data = await response.json();\n    console.log(\"Trailer List: \", data.results);\n    setTrailerList(data.results);\n\n  // check if there is a trailer available\n  if (data.results.length === 0) {\n    console.log(\"No trailer found\");\n    setmodalIsOpen(true);\n    \n  return\n  }\n\n  }\n  fetchTrailer();\n  setShowOverlay(\"overlay active\");\n  }\n}\n\nconst fetchRecommendedMovies = async () => {\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"REC List: \", data.results);\n  console.log(response);\n  setRecommendedMovieList(data.results);\n  console.log(userMood)\n\n}\n\n// GET CURRENT MONTH\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nmonth = months[currentDate.getMonth()];\nconsole.log(\"Month: \" + month);\n\n// GET THE RIGHT SEASON\nfunction getSeason() {\n  if (month === \"December\" || month === \"January\" || month === \"February\") {\n    //console.log(\"Winter\");\n    season = \"Winter\";\n  }\n  else if (month === \"March\" || month === \"April\" || month === \"May\") {\n    //console.log(\"Spring\");\n    season = \"Spring\";\n  }\n  else if (month === \"June\" || month === \"July\" || month === \"August\") {\n    //console.log(\"Summer\");\n    season = \"Summer\";\n  }\n  else {\n    //console.log(\"Autumn\");\n    season = \"Autumn\";\n  }\n  return season;\n}\n\nreturn (\n  <div className=\"App\">\n        <div className={showOverlay} onClick={() => {setShowOverlay(\"overlay\"); setTrailerList([]);}}></div>\n\n        <div className=\"spotlight\">\n        <h1 className=\"logo\">\n          \n        <div className=\"mood-options\">\n        <a className=\"logo-link\" href=\"index.html\">fastMovie</a>\n        <button className=\"btn-angry\" onClick={() => {angryMood();  setIsUserMoodActive(true); {userMood = \"Angry\"}}}>Angry</button>\n        <button className=\"btn-tired\" onClick={() => {tiredMood();  setIsUserMoodActive(true); {userMood = \"Tired\"}}}>Tired</button>\n        <button className=\"btn-sad\" onClick={() => {sadMood(); setIsUserMoodActive(true); {userMood = \"Sad\"}}}>Sad</button>\n        <button className=\"btn-happy\" onClick={() => {happyMood();  setIsUserMoodActive(true); {userMood = \"Happy\"}}}>Happy</button>\n        </div>\n        </h1>\n\n      </div> \n      \n      {isUserMoodActive &&\n      <h3>Recommended For You</h3>}\n      <div className=\"recommended-movies-container\">    \n      {recommendedMovieList.map(movie => (\n        <RecommendedMovies\n        key= {movie.id}\n        title= {movie.title}\n        poster= {IMG_URL_LQ + movie.poster_path}\n        movie_id={movie.id}\n      />\n      ))}\n      </div>\n\n\n\n      <div className=\"ads\">\n      <img src={require('./img/smallads.gif')} alt=\"\" />\n      </div>\n\n      <h3>Up Coming</h3>\n    <MovieList URL=\"/movie/upcoming\"/>\n\n      <h3>Now Playing</h3>\n    <MovieList URL=\"/movie/now_playing\"/>\n\n\n      <div className=\"ads\">\n      <img src={require('./img/bigads.jpg')} alt=\"\" />\n      </div>\n\n      <h3>Popular Movies</h3>\n      <MovieList URL=\"/movie/popular\"/>\n\n\n      <div className=\"trailer-container\">    \n      {trailerList.slice(0, 1).map(trailer => (\n        <Trailer\n        key= {trailer.key}\n        trailer_key= {trailer.key}\n      />\n      ))}\n      </div>\n  \n    <Modal isOpen={modalIsOpen} onRequestClose={() => {setmodalIsOpen(false); setShowOverlay(\"overlay\");}} style={customStyles}>\n    <p>SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE</p>\n    </Modal>\n\n  </div>\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}