{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/movieApp/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Trailer from './components/MovieTrailer';\nimport Modal from 'react-modal';\nimport MovieList from './components/MovieList';\nimport './App.css';\nModal.setAppElement('#root');\n\nfunction App() {\n  const [trailerList, setTrailerList] = useState([]); // TRAILER LIST\n\n  const [showOverlay, setShowOverlay] = useState(\"overlay\");\n  const [modalIsOpen, setmodalIsOpen] = useState(false);\n  const [isUserMoodActive, setIsUserMoodActive] = useState(false);\n  const [recommendedMovieList, setRecommendedMovieList] = useState([]);\n  const [moodBasedMovieList, setMoodBasedMovieList] = useState([]);\n  const [seasonBasedMovieList, setSeasonBasedMovieList] = useState([]);\n  const customStyles = {\n    content: {\n      top: '35%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      width: '40%',\n      transform: 'translate(-50%, -10%)',\n      textAlign: 'center'\n    },\n    overlay: {\n      backgroundColor: 'rgb(0, 0, 0, .5)'\n    }\n  }; // GET VIDEO TRAILER\n\n  document.onclick = function (event) {\n    // check for any event that happens in the page\n    const target = event.target; // store the content from the \"event\" into the variable target\n\n    if (target.tagName.toLowerCase() === \"img\") {\n      // change the image name to lower case and check if it is equal to \"img\"\n      console.log(target);\n      const movie_id = target.attributes.id.value; // get movie ID\n\n      console.log(\"Movie ID: \", movie_id);\n\n      const fetchTrailer = async () => {\n        const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n\n        const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n        const data = await response.json();\n        console.log(\"Trailer List: \", data.results);\n        setTrailerList(data.results); // check if there is a trailer available\n\n        if (data.results.length === 0) {\n          console.log(\"No trailer found\");\n          setmodalIsOpen(true);\n        }\n      };\n\n      fetchTrailer();\n      setShowOverlay(\"overlay active\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: showOverlay,\n    onClick: () => {\n      setShowOverlay(\"overlay\");\n      setTrailerList([]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"NavigationBar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"logo-link\",\n    href: \"index.html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"Movie App\"))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Now Playing\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL: \"/movie/now_playing\",\n    thumbnail: \"big\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Up Coming\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL: \"/movie/upcoming\",\n    thumbnail: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Popular Movies\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL: \"/movie/popular\",\n    thumbnail: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Latest Movies\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL: \"/movie/popular\",\n    thumbnail: \"big\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trailer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, trailerList.slice(0, 1).map(trailer => /*#__PURE__*/React.createElement(Trailer, {\n    key: trailer.key,\n    trailer_key: trailer.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: () => {\n      setmodalIsOpen(false);\n      setShowOverlay(\"overlay\");\n    },\n    style: customStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/movieApp/src/App.js"],"names":["React","useEffect","useState","Trailer","Modal","MovieList","setAppElement","App","trailerList","setTrailerList","showOverlay","setShowOverlay","modalIsOpen","setmodalIsOpen","isUserMoodActive","setIsUserMoodActive","recommendedMovieList","setRecommendedMovieList","moodBasedMovieList","setMoodBasedMovieList","seasonBasedMovieList","setSeasonBasedMovieList","customStyles","content","top","left","right","bottom","marginRight","width","transform","textAlign","overlay","backgroundColor","document","onclick","event","target","tagName","toLowerCase","console","log","movie_id","attributes","id","value","fetchTrailer","TRAILER_PATH","response","fetch","API_KEY","data","json","results","length","slice","map","trailer","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Trailer from './components/MovieTrailer';\nimport Modal from 'react-modal';\nimport MovieList from './components/MovieList';\n\nimport './App.css';\n\nModal.setAppElement('#root');\n\nfunction App() {\n\n  const [trailerList, setTrailerList] = useState([]); // TRAILER LIST\n  const [showOverlay, setShowOverlay] = useState(\"overlay\");\n  const [modalIsOpen, setmodalIsOpen] = useState(false);\n  const [isUserMoodActive, setIsUserMoodActive] = useState(false);\n  const [recommendedMovieList, setRecommendedMovieList] = useState([]);\n  const [moodBasedMovieList, setMoodBasedMovieList] = useState([]);\n  const [seasonBasedMovieList, setSeasonBasedMovieList] = useState([]);\n\n\n  const customStyles = {\n    content: {\n      top: '35%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      width: '40%',\n      transform: 'translate(-50%, -10%)',\n      textAlign: 'center',\n    },\n    overlay: {\n      backgroundColor: 'rgb(0, 0, 0, .5)',\n    },\n  };\n\n  // GET VIDEO TRAILER\n  document.onclick = function (event) { // check for any event that happens in the page\n    const target = event.target; // store the content from the \"event\" into the variable target\n    if (target.tagName.toLowerCase() === \"img\") { // change the image name to lower case and check if it is equal to \"img\"\n      console.log(target);\n      const movie_id = target.attributes.id.value; // get movie ID\n      console.log(\"Movie ID: \", movie_id);\n\n      const fetchTrailer = async () => {\n        const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n        const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n        const data = await response.json();\n        console.log(\"Trailer List: \", data.results);\n        setTrailerList(data.results);\n\n        // check if there is a trailer available\n        if (data.results.length === 0) {\n          console.log(\"No trailer found\");\n          setmodalIsOpen(true);\n        }\n\n      }\n      fetchTrailer();\n      setShowOverlay(\"overlay active\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={showOverlay} onClick={() => { setShowOverlay(\"overlay\"); setTrailerList([]); }}></div>\n\n      <div className=\"NavigationBar\">\n        <h1 className=\"logo\"> \n            <a className=\"logo-link\" href=\"index.html\">Movie App</a>\n        </h1>\n\n      </div>\n\n      <h3>Now Playing</h3>\n      <MovieList URL=\"/movie/now_playing\" thumbnail=\"big\"/>\n\n      <h3>Up Coming</h3>\n      <MovieList URL=\"/movie/upcoming\" thumbnail=\"small\"/>\n\n      <h3>Popular Movies</h3>\n      <MovieList URL=\"/movie/popular\" thumbnail=\"medium\"/>\n\n      <h3>Latest Movies</h3>\n      <MovieList URL=\"/movie/popular\" thumbnail=\"big\"/>\n\n\n      <div className=\"trailer-container\">\n        {trailerList.slice(0, 1).map(trailer => (\n          <Trailer\n            key={trailer.key}\n            trailer_key={trailer.key}\n          />\n        ))}\n      </div>\n\n      <Modal isOpen={modalIsOpen} onRequestClose={() => { setmodalIsOpen(false); setShowOverlay(\"overlay\"); }} style={customStyles}>\n        <p>SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE</p>\n      </Modal>\n\n    </div>\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}