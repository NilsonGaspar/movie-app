{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/RecommendedMovies.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios'; // HAPPY USER MOOD OPTIONS\n\nconst tiredMoodTest = () => {\n  genre = \"35|10770|53\"; // CHECK IF IT IS SPRING\n\n  if (getSeason() === \"Spring\") {\n    console.log(\"It's Spring\");\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion to filter movies\n\n    filterMovieKeywords();\n  } else if (getSeason() === \"Summer\") {\n    console.log(\"It's Summer\");\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion to filter movies\n\n    filterMovieKeywords();\n  } else if (getSeason() === \"Winter\") {\n    console.log(\"It's winter\");\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion\n\n    filterMovieKeywords();\n  } else if (getSeason() === \"Autumn\") {\n    console.log(\"It's Autumn\");\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion to filter movies\n\n    filterMovieKeywords();\n  }\n};\n\nfunction RecommendedMovies({\n  API_KEY,\n  g,\n  keyword1,\n  keyword2,\n  keyword3,\n  keyword4,\n  keyword5,\n  randomYear,\n  IMG_URL_LQ\n}) {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    const getData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const result = await axios(`https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${g}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n        setMovies(result.data.results);\n        console.log(\"List Data: \", result.data.results);\n      } catch (isError) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    getData();\n  }, [g]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popular-movies\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, isError && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, \"Something went wrong...\"), isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 14\n    }\n  }, \" \", movies.map(movie => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: IMG_URL_LQ + movie.poster_path,\n    key: movie.id,\n    id: movie.id,\n    alt: movie.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  })))));\n}\n\nexport default RecommendedMovies;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/RecommendedMovies.js"],"names":["React","useEffect","useState","axios","tiredMoodTest","genre","getSeason","console","log","mergedKeywordsHolder","selectedKeywords","tiredKeywords","concat","springKeywords","filterMovieKeywords","summerKeywords","winterKeywords","autumnKeywords","RecommendedMovies","API_KEY","g","keyword1","keyword2","keyword3","keyword4","keyword5","randomYear","IMG_URL_LQ","movies","setMovies","isLoading","setIsLoading","isError","setIsError","getData","result","data","results","map","movie","poster_path","id","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\n\n// HAPPY USER MOOD OPTIONS\nconst tiredMoodTest = () => {\n    genre = \"35|10770|53\";\n    // CHECK IF IT IS SPRING\n      if (getSeason() === \"Spring\") {\n        console.log(\"It's Spring\");\n        mergedKeywordsHolder = []; // clear the array\n        selectedKeywords = []; // clear the array\n        mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion to filter movies\n        filterMovieKeywords();\n      }\n      else if (getSeason() === \"Summer\") {\n        console.log(\"It's Summer\");\n        mergedKeywordsHolder = []; // clear the array\n        selectedKeywords = []; // clear the array\n        mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion to filter movies\n        filterMovieKeywords();\n      }\n      else if (getSeason() === \"Winter\") {\n        console.log(\"It's winter\");\n        mergedKeywordsHolder = []; // clear the array\n        selectedKeywords = []; // clear the array\n        mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n        // Call this fucntion\n        filterMovieKeywords();\n      }\n      else if (getSeason() === \"Autumn\") {\n        console.log(\"It's Autumn\");\n        mergedKeywordsHolder = []; // clear the array\n        selectedKeywords = []; // clear the array\n        mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n        // Call this fucntion to filter movies\n        filterMovieKeywords();\n      } \n  }\n  \n\n\nfunction RecommendedMovies({API_KEY, g, keyword1, keyword2, keyword3, keyword4, keyword5, randomYear, IMG_URL_LQ}) {\n    const [movies, setMovies] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    useEffect(() => {\n        const getData = async() => {\n            setIsError(false);\n            setIsLoading(true);\n\n            try {\n                const result = await axios(`https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${g}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n                setMovies(result.data.results);\n                console.log(\"List Data: \", result.data.results)\n            }\n            catch (isError) {\n                setIsError(true);\n            }\n            setIsLoading(false);\n        }\n        getData();\n    }, [g]);\n\n    return (\n        <div className=\"popular-movies\">\n        {isError && <div>Something went wrong...</div>}\n\n        {isLoading ? (\n        <div>Loading...</div>\n        ) : (<div className=\"movie-container\"> {movies.map(movie => (\n                <div className=\"movie-list\">\n                <img src={IMG_URL_LQ + movie.poster_path} key={movie.id} id={movie.id} alt={movie.title} />\n                </div>\n            ))}</div>\n            )}\n\n        </div>\n    )\n \n}\n\nexport default RecommendedMovies"]},"metadata":{},"sourceType":"module"}