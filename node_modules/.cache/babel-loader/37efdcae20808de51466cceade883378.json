{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Movie from './getMovie';\nimport Trailer from './getTrailer';\nimport Modal from 'react-modal';\nimport './App.css';\nModal.setAppElement('#root');\n\nfunction App() {\n  const API_KEY = \"fb1090731e2fd7eea03536049722f122\";\n  const IMG_URL_LQ = \"https://image.tmdb.org/t/p/w500\";\n  const IMG_URL_HQ = \"https://image.tmdb.org/t/p/original\";\n  const RECOMMENDED_MOVIES_PATH = \"/discover/movie\";\n  const UPCOMING_PATH = \"/movie/upcoming\";\n  const NOWPLAYING_PATH = \"/movie/now_playing\";\n  const POPULAR_PATH = \"/movie/popular\";\n  const [upComingMovieList, setUpComingMovieList] = useState([]); // UP COMING MOVIE LIST\n\n  const [nowPlayingMovieList, setNowPlayingMovieList] = useState([]); // NOW PLAYING MOVIE LIST\n\n  const [popularMovieList, setPopularMovieList] = useState([]); // POPULAR MOVIE LIST\n\n  const [trailerList, setTrailerList] = useState([]); // TRAILER LIST\n\n  const [recommendedMovieList, setRecommendedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\n\n  const [moodBasedMovieList, setMoodBasedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\n\n  const [seasonBasedMovieList, setSeasonBasedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\n\n  const [showOverlay, setShowOverlay] = useState(\"overlay\");\n  const [modalIsOpen, setmodalIsOpen] = useState(false);\n  const customStyles = {\n    content: {\n      top: '35%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      width: '60%',\n      transform: 'translate(-40%, -10%)'\n    },\n    overlay: {\n      backgroundColor: 'rgb(0, 0, 0, .5)'\n    }\n  };\n  let genre;\n  let randomYear;\n  let keyword1;\n  let keyword2;\n  let keyword3;\n  let keyword4;\n  let keyword5;\n  let season;\n  let month;\n  let currentDate = new Date(); // variable to store date\n  // ARRAYS\n  // --- ANGRY Keywords ---\n  // fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\n\n  const angryKeywords = [\"1721\", \"779\", \"470\", \"10481\", \"192913\", \"14643\", \"3070\", \"9748\"]; // --- HAPPY Keywords ---\n  //happy 231591, love 9673, sports documentary 159290, nature documentary \n\n  const happyKeywords = [\"231591\", \"9673\", \"159290\", \"221355\", \"192913\", \"14643\", \"3070\", \"9748\"]; // entertainer 1491, happy 231591, comedy 248206\n\n  const tiredKeywords = [\"1491\", \"231591\", \"248206\"]; // --- SPRING Keywords ---\n  // spring break 158054, game 18249, party 8508, young adult 206298\n\n  const springKeywords = [\"158054\", \"18249\", \"8508\", \"206298\"]; // --- SUMMER Keywords ---\n  // summer 13088, summer camp 5767, beach 966, resort 10793\n\n  const summerKeywords = [\"13088\", \"5767\", \"966\", \"10793\"]; // --- WINTER Keywords ---\n  // winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\n\n  const winterKeywords = [\"1442\", \"10794\", \"207317\", \"186466\"]; // --- AUTUMN Keywords ---\n  // autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\n\n  const autumnKeywords = [\"178883\", \"3335\", \"9694\", \"8087\", \"1299\", \"3133\", \"6152\"];\n  const fixme = []; // RANDOM Keywords Holder\n  // Array to store random keywords\n  // Used to merge two arrays together\n\n  let mergedKeywordsHolder = []; // Selected ramdom number from mergedKeywordsHolder array\n\n  let selectedKeywords = []; // -------\n\n  useEffect(() => {\n    getUpComingMovieList();\n    getPopularMovieList();\n    getNowPlayingMovieList();\n    happyMood();\n    moodBased();\n    seasonBased();\n  }, []); // UP COMING MOVIE LIST\n\n  const getUpComingMovieList = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${UPCOMING_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n    const data = await response.json();\n    console.log(\"Movie List \", data.results);\n    setUpComingMovieList(data.results);\n  }; // POPULAR MOVIE LIST\n\n\n  const getPopularMovieList = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${POPULAR_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n    const data = await response.json();\n    console.log(\"Movie List \", data.results);\n    setPopularMovieList(data.results);\n  }; // POPULAR MOVIE LIST\n\n\n  const getNowPlayingMovieList = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${NOWPLAYING_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n    const data = await response.json();\n    console.log(\"Movie List \", data.results);\n    setNowPlayingMovieList(data.results);\n  }; // HAPPY USER MOOD OPTIONS\n\n\n  const happyMood = async () => {\n    genre = \"28|35|10759|12|18|9648\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n\n    console.log(mergedKeywordsHolder);\n    filterMovieKeywords();\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&append_to_response=images&include_image_language=en,null&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n    setRecommendedMovieList(data.results);\n  }; // ANGRY USER MOOD OPTIONS\n\n\n  const angryMood = async () => {\n    genre = \"28|80|10759|12\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = angryKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n\n    filterMovieKeywords();\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"Movie List Angry Mood: \", data.results, \"Year: \", randomYear);\n    setRecommendedMovieList(data.results);\n  }; // USER MOOD OPTIONS\n\n\n  const moodBased = async () => {\n    genre = \"28|35|10759|12|18|9648\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n\n    console.log(mergedKeywordsHolder);\n    filterMovieKeywords();\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n    setMoodBasedMovieList(data.results);\n  }; // USER MOOD OPTIONS\n\n\n  const seasonBased = async () => {\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = angryKeywords.concat(springKeywords);\n    ; // merge two arrays together into a new one called mergedKeywordsHolder\n\n    console.log(\"Seaon Based Keywords: \", mergedKeywordsHolder);\n    filterMovieKeywords();\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n    setSeasonBasedMovieList(data.results);\n  }; // FUNCTION TO FILTER ANGRY MOOD MOVIES\n\n\n  function filterMovieKeywords() {\n    // loop to get 6 random values from array angryKeywords and store it in the array randomKeywordsHolder\n    for (var i = 0; i < 5; i++) {\n      var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n\n      while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) {\n        // check if the last value is not the same as the new one\n        pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)];\n      }\n\n      selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n    } // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n\n\n    keyword1 = selectedKeywords[0];\n    keyword2 = selectedKeywords[1];\n    keyword3 = selectedKeywords[2];\n    keyword4 = selectedKeywords[3];\n    keyword5 = selectedKeywords[4]; // Generate random year between 2010 and 2020\n\n    randomYear = getRndInteger(2010, 2020);\n    console.log(\"selected keys \", selectedKeywords);\n    console.log(\"keywords \", keyword1, keyword2, keyword3, keyword4, keyword5);\n  } // FUNCTION TO GENERATE RANDOM YEAR\n\n\n  function getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } // GET VIDEO TRAILER\n\n\n  document.onclick = function (event) {\n    // check for any event that happens in the page\n    const target = event.target; // store the content from the \"event\" into the variable target\n\n    if (target.tagName.toLowerCase() === \"img\") {\n      // change the image name to lower case and check if it is equal to \"img\"\n      console.log(target);\n      const movie_id = target.attributes.id.value; // get movie ID\n\n      console.log(\"Movie ID: \", movie_id);\n\n      const getTrailer = async () => {\n        const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n\n        const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n        const data = await response.json();\n        console.log(\"Trailer List: \", data.results);\n        setTrailerList(data.results); // check if there is a trailer available\n\n        if (data.results.length === 0) {\n          console.log(\"No trailer found\");\n          setmodalIsOpen(true);\n          return;\n        }\n      };\n\n      getTrailer();\n      setShowOverlay(\"overlay active\");\n    }\n  }; // GET CURRENT MONTH\n\n\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  month = months[currentDate.getMonth()];\n  console.log(\"Month: \" + month); // GET THE RIGHT SEASON\n\n  function getSeason() {\n    if (month == \"December\" || month == \"January\" || month == \"February\") {\n      //console.log(\"Winter\");\n      season = \"Winter\";\n    } else if (month == \"March\" || month == \"April\" || month == \"May\") {\n      //console.log(\"Spring\");\n      season = \"Spring\";\n    } else if (month == \"June\" || month == \"July\" || month == \"August\") {\n      //console.log(\"Summer\");\n      season = \"Summer\";\n    } else {\n      //console.log(\"Autumn\");\n      season = \"Autumn\";\n    }\n\n    return season;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: showOverlay,\n    onClick: () => {\n      setShowOverlay(\"overlay\");\n      setTrailerList([]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: () => {\n      setmodalIsOpen(false);\n      setShowOverlay(\"overlay\");\n    },\n    style: customStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }\n  }, \"SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE\")), recommendedMovieList[0] && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spotlight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mood-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"logo-link\",\n    href: \"index.html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }\n  }, \"fastMovie\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-happy\",\n    onClick: () => happyMood(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }\n  }, \"Happy\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-sad\",\n    onClick: () => getUpComingMovieList(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }\n  }, \"Sad\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-tired\",\n    onClick: () => angryMood(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }\n  }, \"Angry\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-angry\",\n    onClick: () => angryMood(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 9\n    }\n  }, \"Angry\"))), /*#__PURE__*/React.createElement(\"img\", {\n    src: IMG_URL_HQ + recommendedMovieList[0].backdrop_path,\n    id: recommendedMovieList[0].id,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 5\n    }\n  }, \"Recommended For You\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 5\n    }\n  }, recommendedMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL_LQ + movie.backdrop_path,\n    backdrop: IMG_URL_LQ + movie.backdrop_path //rating= {movie.vote_average}\n    ,\n    title: movie.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }\n  }, \"For Your Mood\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mood-based-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }\n  }, moodBasedMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL_LQ + movie.poster_path //rating= {movie.vote_average}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }\n  }, \"Season Based\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"season-based-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }\n  }, seasonBasedMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL_LQ + movie.poster_path //rating= {movie.vote_average}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }\n  }, \"Up Coming\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }\n  }, upComingMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL_LQ + movie.poster_path //rating= {movie.vote_average}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }\n  }, \"Popular\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }\n  }, popularMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL_LQ + movie.poster_path //rating= {movie.vote_average} \n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }\n  }, \"Now Playing\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }\n  }, nowPlayingMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL_LQ + movie.poster_path //rating= {movie.vote_average} \n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trailer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }\n  }, trailerList.slice(0, 1).map(trailer => /*#__PURE__*/React.createElement(Trailer, {\n    key: trailer.key,\n    trailer_key: trailer.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 9\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js"],"names":["React","useEffect","useState","Movie","Trailer","Modal","setAppElement","App","API_KEY","IMG_URL_LQ","IMG_URL_HQ","RECOMMENDED_MOVIES_PATH","UPCOMING_PATH","NOWPLAYING_PATH","POPULAR_PATH","upComingMovieList","setUpComingMovieList","nowPlayingMovieList","setNowPlayingMovieList","popularMovieList","setPopularMovieList","trailerList","setTrailerList","recommendedMovieList","setRecommendedMovieList","moodBasedMovieList","setMoodBasedMovieList","seasonBasedMovieList","setSeasonBasedMovieList","showOverlay","setShowOverlay","modalIsOpen","setmodalIsOpen","customStyles","content","top","left","right","bottom","marginRight","width","transform","overlay","backgroundColor","genre","randomYear","keyword1","keyword2","keyword3","keyword4","keyword5","season","month","currentDate","Date","angryKeywords","happyKeywords","tiredKeywords","springKeywords","summerKeywords","winterKeywords","autumnKeywords","fixme","mergedKeywordsHolder","selectedKeywords","getUpComingMovieList","getPopularMovieList","getNowPlayingMovieList","happyMood","moodBased","seasonBased","response","fetch","data","json","console","log","results","concat","filterMovieKeywords","angryMood","i","pickedKeyword","Math","floor","random","length","lastIndexOf","push","getRndInteger","min","max","document","onclick","event","target","tagName","toLowerCase","movie_id","attributes","id","value","getTrailer","TRAILER_PATH","months","getMonth","getSeason","backdrop_path","map","movie","title","poster_path","slice","trailer","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Movie from './getMovie';\nimport Trailer from './getTrailer';\nimport Modal from 'react-modal';\nimport './App.css';\n\nModal.setAppElement('#root');\n\nfunction App() {\n\nconst API_KEY = \"fb1090731e2fd7eea03536049722f122\";\nconst IMG_URL_LQ = \"https://image.tmdb.org/t/p/w500\";\nconst IMG_URL_HQ = \"https://image.tmdb.org/t/p/original\";\nconst RECOMMENDED_MOVIES_PATH = \"/discover/movie\";\nconst UPCOMING_PATH = \"/movie/upcoming\";\nconst NOWPLAYING_PATH = \"/movie/now_playing\";\nconst POPULAR_PATH = \"/movie/popular\";\n\nconst [upComingMovieList, setUpComingMovieList] = useState([]); // UP COMING MOVIE LIST\nconst [nowPlayingMovieList, setNowPlayingMovieList] = useState([]); // NOW PLAYING MOVIE LIST\nconst [popularMovieList, setPopularMovieList] = useState([]); // POPULAR MOVIE LIST\nconst [trailerList, setTrailerList] = useState([]); // TRAILER LIST\nconst [recommendedMovieList, setRecommendedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\nconst [moodBasedMovieList, setMoodBasedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\nconst [seasonBasedMovieList, setSeasonBasedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\n\nconst [showOverlay, setShowOverlay] = useState(\"overlay\");\nconst [modalIsOpen, setmodalIsOpen] = useState(false);\n\nconst customStyles = {\n  content: {\n    top: '35%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    width: '60%',\n    transform: 'translate(-40%, -10%)',\n  },\n  overlay: {\n    backgroundColor: 'rgb(0, 0, 0, .5)',\n  },\n};\n\n\nlet genre;\nlet randomYear;\nlet keyword1;\nlet keyword2;\nlet keyword3;\nlet keyword4;\nlet keyword5;\n\nlet season;\nlet month;\n\nlet currentDate = new Date(); // variable to store date\n\n\n// ARRAYS\n\n// --- ANGRY Keywords ---\n// fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\nconst angryKeywords = [\"1721\",\"779\",\"470\",\"10481\",\"192913\",\"14643\",\"3070\",\"9748\"];\n// --- HAPPY Keywords ---\n//happy 231591, love 9673, sports documentary 159290, nature documentary \nconst happyKeywords = [\"231591\",\"9673\",\"159290\",\"221355\",\"192913\",\"14643\",\"3070\",\"9748\"];\n\n// entertainer 1491, happy 231591, comedy 248206\nconst tiredKeywords = [\"1491\",\"231591\",\"248206\"];\n\n// --- SPRING Keywords ---\n// spring break 158054, game 18249, party 8508, young adult 206298\nconst springKeywords = [\"158054\",\"18249\",\"8508\",\"206298\"];\n\n// --- SUMMER Keywords ---\n// summer 13088, summer camp 5767, beach 966, resort 10793\nconst summerKeywords = [\"13088\",\"5767\",\"966\",\"10793\"];\n\n// --- WINTER Keywords ---\n// winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\nconst winterKeywords = [\"1442\",\"10794\",\"207317\",\"186466\"];\n\n// --- AUTUMN Keywords ---\n// autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\nconst autumnKeywords = [\"178883\",\"3335\",\"9694\",\"8087\",\"1299\",\"3133\",\"6152\"];\n\nconst fixme = [];\n\n// RANDOM Keywords Holder\n// Array to store random keywords\n// Used to merge two arrays together\nlet mergedKeywordsHolder = []; \n\n// Selected ramdom number from mergedKeywordsHolder array\nlet selectedKeywords = [];\n\n// -------\n\n\nuseEffect(() => {\n  getUpComingMovieList()\n  getPopularMovieList()\n  getNowPlayingMovieList()\n  happyMood()\n  moodBased()\n  seasonBased()\n\n}, []);\n\n// UP COMING MOVIE LIST\nconst getUpComingMovieList = async () => {\n  const response = await fetch(`https://api.themoviedb.org/3${UPCOMING_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n  const data = await response.json();\n  console.log(\"Movie List \", data.results);\n  setUpComingMovieList(data.results);\n}\n\n// POPULAR MOVIE LIST\nconst getPopularMovieList = async () => {\n  const response = await fetch(`https://api.themoviedb.org/3${POPULAR_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n  const data = await response.json();\n  console.log(\"Movie List \", data.results);\n  setPopularMovieList(data.results);\n}\n\n// POPULAR MOVIE LIST\nconst getNowPlayingMovieList = async () => {\n  const response = await fetch(`https://api.themoviedb.org/3${NOWPLAYING_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n  const data = await response.json();\n  console.log(\"Movie List \", data.results);\n  setNowPlayingMovieList(data.results);\n}\n\n\n// HAPPY USER MOOD OPTIONS\nconst happyMood = async () => {\n  genre = \"28|35|10759|12|18|9648\";\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n  mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  console.log(mergedKeywordsHolder);\n  filterMovieKeywords()\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&append_to_response=images&include_image_language=en,null&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n  setRecommendedMovieList(data.results);\n}\n\n// ANGRY USER MOOD OPTIONS\nconst angryMood = async () => {\n\n  genre = \"28|80|10759|12\";\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n  mergedKeywordsHolder = angryKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  filterMovieKeywords()\n\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"Movie List Angry Mood: \", data.results, \"Year: \", randomYear);\n  setRecommendedMovieList(data.results);\n\n}\n\n// USER MOOD OPTIONS\nconst moodBased = async () => {\n  genre = \"28|35|10759|12|18|9648\";\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n  mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  console.log(mergedKeywordsHolder);\n\n  filterMovieKeywords()\n\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n  setMoodBasedMovieList(data.results);\n}\n\n// USER MOOD OPTIONS\nconst seasonBased = async () => {\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n  mergedKeywordsHolder = angryKeywords.concat(springKeywords); ; // merge two arrays together into a new one called mergedKeywordsHolder\n  console.log(\"Seaon Based Keywords: \", mergedKeywordsHolder);\n  filterMovieKeywords()\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n  setSeasonBasedMovieList(data.results);\n}\n\n\n// FUNCTION TO FILTER ANGRY MOOD MOVIES\nfunction filterMovieKeywords() {\n  // loop to get 6 random values from array angryKeywords and store it in the array randomKeywordsHolder\n  for (var i = 0; i < 5; i++) { \n    var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random()*mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n    while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) { // check if the last value is not the same as the new one\n      pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random()*mergedKeywordsHolder.length)];\n    }\n    selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n}\n  // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n  keyword1 = selectedKeywords[0];\n  keyword2 = selectedKeywords[1];\n  keyword3 = selectedKeywords[2];\n  keyword4 = selectedKeywords[3];\n  keyword5 = selectedKeywords[4];\n\n  // Generate random year between 2010 and 2020\nrandomYear = getRndInteger(2010, 2020);\nconsole.log(\"selected keys \", selectedKeywords)\n console.log(\"keywords \",keyword1, keyword2, keyword3, keyword4,keyword5)\n}\n\n// FUNCTION TO GENERATE RANDOM YEAR\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n// GET VIDEO TRAILER\ndocument.onclick = function (event) { // check for any event that happens in the page\n  const target = event.target; // store the content from the \"event\" into the variable target\n  if (target.tagName.toLowerCase() === \"img\") { // change the image name to lower case and check if it is equal to \"img\"\n  console.log(target);\n  const movie_id = target.attributes.id.value; // get movie ID\n  console.log(\"Movie ID: \", movie_id);\n  \n  const getTrailer = async () => {\n    const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n    const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n    const data = await response.json();\n    console.log(\"Trailer List: \", data.results);\n    setTrailerList(data.results);\n\n  // check if there is a trailer available\n  if (data.results.length === 0) {\n    console.log(\"No trailer found\");\n    setmodalIsOpen(true);\n    \n  return\n  }\n\n  }\n  getTrailer();\n  setShowOverlay(\"overlay active\");\n  }\n}\n\n// GET CURRENT MONTH\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nmonth = months[currentDate.getMonth()];\nconsole.log(\"Month: \" + month);\n\n// GET THE RIGHT SEASON\nfunction getSeason() {\n  if (month == \"December\" || month == \"January\" || month == \"February\") {\n    //console.log(\"Winter\");\n    season = \"Winter\";\n  }\n  else if (month == \"March\" || month == \"April\" || month == \"May\") {\n    //console.log(\"Spring\");\n    season = \"Spring\";\n  }\n  else if (month == \"June\" || month == \"July\" || month == \"August\") {\n    //console.log(\"Summer\");\n    season = \"Summer\";\n  }\n  else {\n    //console.log(\"Autumn\");\n    season = \"Autumn\";\n  }\n  return season;\n}\n\n\n\nreturn (\n  <div className=\"App\">\n\n    <div className={showOverlay} onClick={() => {setShowOverlay(\"overlay\"); setTrailerList([]);}}></div>\n\n  \n    <Modal isOpen={modalIsOpen} onRequestClose={() => {setmodalIsOpen(false); setShowOverlay(\"overlay\");}} style={customStyles}>\n      <p>SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE</p>\n    </Modal>\n\n\n      {recommendedMovieList[0] &&\n        <div className=\"spotlight\">\n        <h1 className=\"logo\">\n          \n        <div className=\"mood-options\">\n        <a className=\"logo-link\" href=\"index.html\">fastMovie</a>\n        <button className=\"btn-happy\" onClick={() => happyMood()}>Happy</button>\n        <button className=\"btn-sad\" onClick={() => getUpComingMovieList()}>Sad</button>\n        <button className=\"btn-tired\" onClick={() => angryMood()}>Angry</button>\n        <button className=\"btn-angry\" onClick={() => angryMood()}>Angry</button>\n        </div>\n        </h1>\n        \n        <img src={IMG_URL_HQ + recommendedMovieList[0].backdrop_path} id={recommendedMovieList[0].id} alt=\"\"/>  \n      </div> \n      }\n\n  \n\n    <h3>Recommended For You</h3>\n    <div className=\"recommended-movies-container\">\n      {recommendedMovieList.map(movie => (\n        <Movie \n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL_LQ + movie.backdrop_path}\n        backdrop={IMG_URL_LQ + movie.backdrop_path}\n        //rating= {movie.vote_average}\n        title= {movie.title} />\n      ))}\n      </div> \n      \n      <h3>For Your Mood</h3>\n      <div className=\"mood-based-movies-container\">\n      {moodBasedMovieList.map(movie => (\n        <Movie\n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL_LQ + movie.poster_path}\n        //rating= {movie.vote_average}\n         />\n      ))}\n      </div>\n\n\n      <h3>Season Based</h3>\n      <div className=\"season-based-movies-container\">\n      {seasonBasedMovieList.map(movie => (\n        <Movie\n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL_LQ + movie.poster_path}\n        //rating= {movie.vote_average}\n         />\n      ))}\n      </div>\n\n\n      <h3>Up Coming</h3>\n      <div className=\"movie-container\">\n      {upComingMovieList.map(movie => (\n        <Movie\n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL_LQ + movie.poster_path} \n        //rating= {movie.vote_average}\n        />\n      ))}\n      </div>\n\n      <h3>Popular</h3>\n      <div className=\"movie-container\">\n      {popularMovieList.map(movie => (\n        <Movie \n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL_LQ + movie.poster_path} \n        //rating= {movie.vote_average} \n        />\n      ))}\n      </div>\n      \n      <h3>Now Playing</h3>\n      <div className=\"movie-container\">\n      {nowPlayingMovieList.map(movie => (\n        <Movie \n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL_LQ + movie.poster_path} \n        //rating= {movie.vote_average} \n        />\n      ))}\n      </div>\n\n      <div className=\"trailer-container\">    \n      {trailerList.slice(0, 1).map(trailer => (\n        <Trailer\n        key= {trailer.key}\n        trailer_key= {trailer.key}\n      />\n      ))}\n      </div>\n\n\n  </div>\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}