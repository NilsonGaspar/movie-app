{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Movie from './getMovie';\nimport './App.css';\n\nfunction App() {\n  const API_KEY = \"fb1090731e2fd7eea03536049722f122\";\n  const IMG_URL = \"https://image.tmdb.org/t/p/w500\"; //const BASIC_PATH = `https://api.themoviedb.org/3${path}?api_key=fb1090731e2fd7eea03536049722f122&language=en-GB`;\n  //const [mood, setMood] = useState('');\n  // movie list\n\n  const [movieList, setMovieList] = useState([]);\n  const path = \"/movie/popular\";\n\n  const happyMood = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${path}?api_key=${API_KEY}&language=en-GB`);\n    const data = await response.json();\n    console.log(\"Movie List: \", data.results);\n    setMovieList(data.results);\n  }; // CHECK FOR WHEN USER CLICKS IN THE IMAGE / GET MOVIE TRAILER \n\n\n  document.onclick = function (event) {\n    // check for any event that happens in the page\n    var target = event.target; // store the content from the \"event\" into the variable target\n\n    if (target.tagName.toLowerCase() === \"img\") {\n      // change the image name to lower case and check if it is equal to \"img\"\n      var movieId = target.attributes.movieid.value; // get movie ID\n\n      console.log(\"Movie ID: \", movieId);\n      var section = event.target.parentElement;\n      var content = section.nextElementSibling; // add content after Section Element \n      // MOVIE TRAILER\n\n      var path = `/movie/${movieId}/videos`; // create url to search for movie id\n\n      var videoUrl = `https://api.themoviedb.org/3${path}?api_key=${API_KEY}&language=en-GB`(path); // store the url in the varialbe trailerUrl\n      // FETCH MOVIE VIDEOS\n\n      fetch(videoUrl).then(res => res.json()) // return the value in json format \n      .then(data => createVideoTemplate(data, content)) // send the content from \"data\" to the function createVideoTemplate(data, content)\n      .catch(error => {\n        // check for error and display in the console\n        console.log(\"Trailer Video Error: \", error);\n      });\n    }\n  }; // CREATE TEMPLATE FOR VIDEOS\n\n\n  function createVideoTemplate(data, content) {\n    // display movie trailer\n    console.log(\"Videos\", data);\n    var videos = data.results; // store the from data.results into the variable videos\n\n    var iframeContainer = document.createElement(\"div\"); // create a div element and link it to the variable iframeContainer\n    // check if there is a trailer available\n\n    if (videos.length === 0) {\n      content.innerHTML = `<p class=\"videoError\">SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE</p>`;\n      overlay.classList.add(\"active\");\n      hideRating();\n      return;\n    } // loop through the videos\n\n\n    for (var i = 0; i < 1; i++) {\n      // (videos.length (1)) will only get only 1 movie trailer\n      var video = videos[i]; // all videos\n\n      console.log(\"Video Check: \", video);\n      var iframe = createIframe(video); // Run the function \"createIframe(video)\" and store the content in the variable iframe\n\n      iframeContainer.appendChild(iframe); // store the content in the iframe into the iframeContainer (div)\n\n      content.appendChild(iframeContainer); // store the iframeContainer (div) inside the trailerContent (div class Content)\n\n      overlay.classList.add(\"active\"); // activates the overlay\n    }\n\n    hideRating();\n  } // CREATE YOUTUBE PLAYER\n\n\n  function createIframe(video) {\n    var iframe = document.createElement(\"iframe\"); // create html element called iframe\n\n    iframe.src = `https://www.youtube.com/embed/${video.key}`; // Youtube dynamic key, will be updated everytime this fucntion is run\n\n    iframe.width = 860;\n    iframe.height = 515;\n    iframe.frameborder = 0;\n    iframe.allowFullscreen = true;\n    return iframe;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"index.html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 26\n    }\n  }, \"fastMovie\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mood-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mood-status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"How Are You Feeling Today?\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => happyMood(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \"Happy\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, \"Sad\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, \"Tired\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"Angry\")), movieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    poster: IMG_URL + movie.poster_path,\n    rating: movie.vote_average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js"],"names":["React","useEffect","useState","Movie","App","API_KEY","IMG_URL","movieList","setMovieList","path","happyMood","response","fetch","data","json","console","log","results","document","onclick","event","target","tagName","toLowerCase","movieId","attributes","movieid","value","section","parentElement","content","nextElementSibling","videoUrl","then","res","createVideoTemplate","catch","error","videos","iframeContainer","createElement","length","innerHTML","overlay","classList","add","hideRating","i","video","iframe","createIframe","appendChild","src","key","width","height","frameborder","allowFullscreen","map","movie","id","poster_path","vote_average"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Movie from './getMovie';\nimport './App.css';\n\nfunction App() {\n\nconst API_KEY = \"fb1090731e2fd7eea03536049722f122\";\nconst IMG_URL = \"https://image.tmdb.org/t/p/w500\";\n//const BASIC_PATH = `https://api.themoviedb.org/3${path}?api_key=fb1090731e2fd7eea03536049722f122&language=en-GB`;\n\n//const [mood, setMood] = useState('');\n\n\n// movie list\nconst [movieList, setMovieList] = useState([]);\n\nconst path = \"/movie/popular\";\n\nconst happyMood = async () => {\n  const response = await fetch(`https://api.themoviedb.org/3${path}?api_key=${API_KEY}&language=en-GB`);\n  const data = await response.json();\n  console.log(\"Movie List: \", data.results);\n  setMovieList(data.results);\n}\n\n\n// CHECK FOR WHEN USER CLICKS IN THE IMAGE / GET MOVIE TRAILER \ndocument.onclick = function (event) { // check for any event that happens in the page\n  var target = event.target; // store the content from the \"event\" into the variable target\n  if (target.tagName.toLowerCase() === \"img\") { // change the image name to lower case and check if it is equal to \"img\"\n    var movieId = target.attributes.movieid.value; // get movie ID\n    console.log(\"Movie ID: \", movieId);\n    var section = event.target.parentElement;\n    var content = section.nextElementSibling; // add content after Section Element \n\n    // MOVIE TRAILER\n    var path = `/movie/${movieId}/videos`; // create url to search for movie id\n    var videoUrl = `https://api.themoviedb.org/3${path}?api_key=${API_KEY}&language=en-GB`(path); // store the url in the varialbe trailerUrl\n    \n    // FETCH MOVIE VIDEOS\n    fetch(videoUrl)\n      .then((res) => res.json()) // return the value in json format \n      .then((data) => createVideoTemplate(data, content)) // send the content from \"data\" to the function createVideoTemplate(data, content)\n      .catch((error) => { // check for error and display in the console\n        console.log(\"Trailer Video Error: \", error);\n      });\n  }\n}\n\n// CREATE TEMPLATE FOR VIDEOS\nfunction createVideoTemplate(data, content) {\n  // display movie trailer\n  console.log(\"Videos\", data);\n  var videos = data.results; // store the from data.results into the variable videos\n  var iframeContainer = document.createElement(\"div\"); // create a div element and link it to the variable iframeContainer\n\n  // check if there is a trailer available\n  if (videos.length === 0) {\n    content.innerHTML = `<p class=\"videoError\">SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE</p>`;\n    overlay.classList.add(\"active\");\n    hideRating();\n  return;\n  }\n\n  // loop through the videos\n  for (var i = 0; i < 1; i++) { // (videos.length (1)) will only get only 1 movie trailer\n    var video = videos[i]; // all videos\n    console.log(\"Video Check: \", video);\n    var iframe = createIframe(video); // Run the function \"createIframe(video)\" and store the content in the variable iframe\n    iframeContainer.appendChild(iframe); // store the content in the iframe into the iframeContainer (div)\n    content.appendChild(iframeContainer); // store the iframeContainer (div) inside the trailerContent (div class Content)\n    overlay.classList.add(\"active\"); // activates the overlay\n  }\n    hideRating();\n}\n\n// CREATE YOUTUBE PLAYER\nfunction createIframe(video) {\n  var iframe = document.createElement(\"iframe\"); // create html element called iframe\n  iframe.src = `https://www.youtube.com/embed/${video.key}`; // Youtube dynamic key, will be updated everytime this fucntion is run\n  iframe.width = 860;\n  iframe.height = 515;\n  iframe.frameborder = 0;\n  iframe.allowFullscreen = true;\n  return iframe;\n}\n\nreturn (\n  <div className=\"App\">\n    <h1 className=\"logo\"><a href=\"index.html\">fastMovie</a></h1>\n      \n    <div className=\"mood-options\">\n      <p className=\"mood-status\">How Are You Feeling Today?</p>\n      <button onClick={() => happyMood()}>Happy</button>\n      <button>Sad</button>\n      <button>Tired</button>\n      <button>Angry</button>\n    </div>\n\n      {movieList.map(movie => (\n        <Movie \n        key= {movie.id}\n        poster= {IMG_URL + movie.poster_path} \n        rating= {movie.vote_average} />\n      ))}\n      \n  </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}