{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Trailer from './components/MovieTrailer';\nimport Modal from 'react-modal';\nimport MovieList from './components/MovieList';\nimport RecommendedMovies from './components/RecommendedMovies';\nimport NavigationBar from './components/NavigationBar';\nimport './App.css';\nModal.setAppElement('#root');\n\nfunction App() {\n  useEffect(() => {\n    moodBasedMovies();\n    seasonBasedMovies();\n  }, []);\n  const API_KEY = \"fb1090731e2fd7eea03536049722f122\";\n  const IMG_URL_LQ = \"https://image.tmdb.org/t/p/w500\";\n  const IMG_URL_HQ = \"https://image.tmdb.org/t/p/original\";\n  const RECOMMENDED_MOVIES_PATH = \"/discover/movie\";\n  const [trailerList, setTrailerList] = useState([]); // TRAILER LIST\n\n  const [showOverlay, setShowOverlay] = useState(\"overlay\");\n  const [modalIsOpen, setmodalIsOpen] = useState(false);\n  const [isUserMoodActive, setIsUserMoodActive] = useState(false);\n  const [recommendedMovieList, setRecommendedMovieList] = useState([]);\n  const [moodBasedMovieList, setMoodBasedMovieList] = useState([]);\n  const [seasonBasedMovieList, setSeasonBasedMovieList] = useState([]);\n  let genre = \"\";\n  let randomYear = \"\";\n  let keyword1 = \"\";\n  let keyword2 = \"\";\n  let keyword3 = \"\";\n  let keyword4 = \"\";\n  let keyword5 = \"\";\n  let season;\n  let month;\n  let currentDate = new Date(); // variable to store date\n\n  const customStyles = {\n    content: {\n      top: '35%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      width: '40%',\n      transform: 'translate(-50%, -10%)',\n      textAlign: 'center'\n    },\n    overlay: {\n      backgroundColor: 'rgb(0, 0, 0, .5)'\n    }\n  }; // ARRAYS\n  // --- ANGRY Keywords ---\n  // fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\n\n  const angryKeywords = [\"1721\", \"779\", \"470\", \"10481\", \"192913\", \"14643\", \"3070\", \"9748\"]; // --- HAPPY Keywords ---\n  //happy 231591, love 9673, sports documentary 159290, nature documentary 221355, happiness 154060, family 18035, magic 2343\n\n  const happyKeywords = [\"231591\", \"9673\", \"159290\", \"221355\", \"154060\", \"18035\", \"2343\"]; // entertainer 1491, happy 231591, comedy 248206\n\n  const tiredKeywords = [\"1491\", \"231591\", \"248206\"]; //---------\n  // --- SPRING Keywords ---\n  // spring break 158054, game 18249, party 8508, young adult 206298\n\n  const springKeywords = [\"158054\", \"18249\", \"8508\", \"206298\"]; // --- SUMMER Keywords ---\n  // summer 13088, summer camp 5767, beach 966, resort 10793, family secrets, teenage girl, family relationships\n\n  const summerKeywords = [\"13088\", \"5767\", \"966\", \"10793\", \"6625\", \"10809\", \"10235\"]; // --- WINTER Keywords ---\n  // winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\n\n  const winterKeywords = [\"1442\", \"10794\", \"207317\", \"186466\"]; // --- AUTUMN Keywords ---\n  // autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\n\n  const autumnKeywords = [\"178883\", \"3335\", \"9694\", \"8087\", \"1299\", \"3133\", \"6152\"]; // RANDOM Keywords Holder\n  // Array to store random keywords\n  // Used to merge two arrays together\n\n  let mergedKeywordsHolder = []; // Selected ramdom number from mergedKeywordsHolder array\n\n  let selectedKeywords = []; // -------\n  // HAPPY USER MOOD OPTIONS\n\n  const moodBasedMovies = () => {\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } // Call this fucntion to filter movies\n\n\n    filterMovieKeywords();\n    fetchMoodBasedMovies();\n  }; // HAPPY USER MOOD OPTIONS\n\n\n  const seasonBasedMovies = () => {\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    } // Call this fucntion to filter movies\n\n\n    filterMovieKeywords();\n    fetchSeasonBasedMovies();\n  }; // HAPPY USER MOOD OPTIONS\n\n\n  const happyMood = () => {\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = happyKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = happyKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = happyKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } // Call this fucntion to filter movies\n\n\n    filterMovieKeywords();\n    fetchRecommendedMovies();\n  }; // TIRED USER MOOD OPTIONS\n\n\n  const tiredMood = () => {\n    genre = \"35|10770|53\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } // Call this fucntion to filter movies\n\n\n    filterMovieKeywords();\n    fetchRecommendedMovies();\n  }; // SAD USER MOOD OPTIONS\n\n\n  const sadMood = () => {\n    genre = \"35|10770|53\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } // Call this fucntion to filter movies\n\n\n    filterMovieKeywords();\n    fetchRecommendedMovies();\n  }; // ANGRY USER MOOD OPTIONS\n\n\n  const angryMood = () => {\n    genre = \"28|80|10759|12\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = angryKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = angryKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = angryKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = angryKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    } // Call this fucntion to filter movies\n\n\n    filterMovieKeywords();\n    fetchRecommendedMovies();\n  }; // FUNCTION TO FILTER ANGRY MOOD MOVIES\n\n\n  function filterMovieKeywords() {\n    // loop to get 5 random values from array angryKeywords and store it in the array randomKeywordsHolder\n    for (var i = 0; i < 5; i++) {\n      var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n\n      while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) {\n        // check if the last value is not the same as the new one\n        pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)];\n      }\n\n      selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n    } // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n\n\n    keyword1 = selectedKeywords[0];\n    keyword2 = selectedKeywords[1];\n    keyword3 = selectedKeywords[2];\n    keyword4 = selectedKeywords[3];\n    keyword5 = selectedKeywords[4]; // Generate random year between 2010 and 2020\n\n    randomYear = getRndInteger(2010, 2020);\n    console.log(\"selected keys \", selectedKeywords);\n    console.log(\"keywords \", keyword1, keyword2, keyword3, keyword4, keyword5);\n  } // FUNCTION TO GENERATE RANDOM YEAR\n\n\n  function getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } // GET VIDEO TRAILER\n\n\n  document.onclick = function (event) {\n    // check for any event that happens in the page\n    const target = event.target; // store the content from the \"event\" into the variable target\n\n    if (target.tagName.toLowerCase() === \"img\") {\n      // change the image name to lower case and check if it is equal to \"img\"\n      console.log(target);\n      const movie_id = target.attributes.id.value; // get movie ID\n\n      console.log(\"Movie ID: \", movie_id);\n\n      const fetchTrailer = async () => {\n        const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n\n        const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n        const data = await response.json();\n        console.log(\"Trailer List: \", data.results);\n        setTrailerList(data.results); // check if there is a trailer available\n\n        if (data.results.length === 0) {\n          console.log(\"No trailer found\");\n          setmodalIsOpen(true);\n        }\n      };\n\n      fetchTrailer();\n      setShowOverlay(\"overlay active\");\n    }\n  };\n\n  const fetchRecommendedMovies = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"REC List: \", data.results);\n    console.log(response);\n    setRecommendedMovieList(data.results);\n    console.log(\"Month: \" + month);\n  };\n\n  const fetchMoodBasedMovies = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"REC List: \", data.results);\n    console.log(response);\n    setMoodBasedMovieList(data.results);\n    console.log(\"Month: \" + month);\n  };\n\n  const fetchSeasonBasedMovies = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"REC List: \", data.results);\n    console.log(response);\n    setSeasonBasedMovieList(data.results);\n    console.log(\"Month: \" + month);\n  }; // GET CURRENT MONTH\n\n\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  month = months[currentDate.getMonth()]; // GET THE RIGHT SEASON\n\n  function getSeason() {\n    if (month === \"December\" || month === \"January\" || month === \"February\") {\n      //console.log(\"Winter\");\n      season = \"Winter\";\n    } else if (month === \"March\" || month === \"April\" || month === \"May\") {\n      //console.log(\"Spring\");\n      season = \"Spring\";\n    } else if (month === \"June\" || month === \"July\" || month === \"August\") {\n      //console.log(\"Summer\");\n      season = \"Summer\";\n    } else {\n      //console.log(\"Autumn\");\n      season = \"Autumn\";\n    }\n\n    return season;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: showOverlay,\n    onClick: () => {\n      setShowOverlay(\"overlay\");\n      setTrailerList([]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(NavigationBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }\n  }), isUserMoodActive && /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }\n  }, \"Recommended For You\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }\n  }, recommendedMovieList.map(movie => /*#__PURE__*/React.createElement(RecommendedMovies, {\n    key: movie.id,\n    title: movie.title,\n    poster: IMG_URL_LQ + movie.poster_path,\n    movie_id: movie.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ads\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require('./img/smallads.gif'),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }\n  }, \"Up Coming\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL: \"/movie/upcoming\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }\n  }, \"Mood Based\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }\n  }, moodBasedMovieList.map(movie => /*#__PURE__*/React.createElement(RecommendedMovies, {\n    key: movie.id,\n    title: movie.title,\n    poster: IMG_URL_LQ + movie.poster_path,\n    movie_id: movie.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ads\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require('./img/bigads.jpg'),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }\n  }, \"Now Playing\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL: \"/movie/now_playing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }\n  }, \"Season Based Movies\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }\n  }, seasonBasedMovieList.map(movie => /*#__PURE__*/React.createElement(RecommendedMovies, {\n    key: movie.id,\n    title: movie.title,\n    poster: IMG_URL_LQ + movie.poster_path,\n    movie_id: movie.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ads\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require('./img/bigads.jpg'),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }\n  }, \"Popular Movies\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL: \"/movie/popular\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trailer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }\n  }, trailerList.slice(0, 1).map(trailer => /*#__PURE__*/React.createElement(Trailer, {\n    key: trailer.key,\n    trailer_key: trailer.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: () => {\n      setmodalIsOpen(false);\n      setShowOverlay(\"overlay\");\n    },\n    style: customStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 9\n    }\n  }, \"SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js"],"names":["React","useEffect","useState","Trailer","Modal","MovieList","RecommendedMovies","NavigationBar","setAppElement","App","moodBasedMovies","seasonBasedMovies","API_KEY","IMG_URL_LQ","IMG_URL_HQ","RECOMMENDED_MOVIES_PATH","trailerList","setTrailerList","showOverlay","setShowOverlay","modalIsOpen","setmodalIsOpen","isUserMoodActive","setIsUserMoodActive","recommendedMovieList","setRecommendedMovieList","moodBasedMovieList","setMoodBasedMovieList","seasonBasedMovieList","setSeasonBasedMovieList","genre","randomYear","keyword1","keyword2","keyword3","keyword4","keyword5","season","month","currentDate","Date","customStyles","content","top","left","right","bottom","marginRight","width","transform","textAlign","overlay","backgroundColor","angryKeywords","happyKeywords","tiredKeywords","springKeywords","summerKeywords","winterKeywords","autumnKeywords","mergedKeywordsHolder","selectedKeywords","getSeason","console","log","filterMovieKeywords","fetchMoodBasedMovies","fetchSeasonBasedMovies","happyMood","concat","fetchRecommendedMovies","tiredMood","sadMood","angryMood","i","pickedKeyword","Math","floor","random","length","lastIndexOf","push","getRndInteger","min","max","document","onclick","event","target","tagName","toLowerCase","movie_id","attributes","id","value","fetchTrailer","TRAILER_PATH","response","fetch","data","json","results","months","getMonth","map","movie","title","poster_path","require","slice","trailer","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Trailer from './components/MovieTrailer';\nimport Modal from 'react-modal';\nimport MovieList from './components/MovieList';\nimport RecommendedMovies from './components/RecommendedMovies';\nimport NavigationBar from './components/NavigationBar';\n\nimport './App.css';\n\nModal.setAppElement('#root');\n\nfunction App() {\n\n  useEffect(() => {\n    moodBasedMovies();\n    seasonBasedMovies();\n  }, [])\n\n  const API_KEY = \"fb1090731e2fd7eea03536049722f122\";\n  const IMG_URL_LQ = \"https://image.tmdb.org/t/p/w500\";\n  const IMG_URL_HQ = \"https://image.tmdb.org/t/p/original\";\n  const RECOMMENDED_MOVIES_PATH = \"/discover/movie\";\n\n  const [trailerList, setTrailerList] = useState([]); // TRAILER LIST\n  const [showOverlay, setShowOverlay] = useState(\"overlay\");\n  const [modalIsOpen, setmodalIsOpen] = useState(false);\n  const [isUserMoodActive, setIsUserMoodActive] = useState(false);\n  const [recommendedMovieList, setRecommendedMovieList] = useState([]);\n  const [moodBasedMovieList, setMoodBasedMovieList] = useState([]);\n  const [seasonBasedMovieList, setSeasonBasedMovieList] = useState([]);\n\n  let genre = \"\";\n  let randomYear = \"\";\n  let keyword1 = \"\";\n  let keyword2 = \"\";\n  let keyword3 = \"\";\n  let keyword4 = \"\";\n  let keyword5 = \"\";\n  let season;\n  let month;\n  let currentDate = new Date(); // variable to store date\n\n\n  const customStyles = {\n    content: {\n      top: '35%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      width: '40%',\n      transform: 'translate(-50%, -10%)',\n      textAlign: 'center',\n    },\n    overlay: {\n      backgroundColor: 'rgb(0, 0, 0, .5)',\n    },\n  };\n\n\n\n  // ARRAYS\n\n  // --- ANGRY Keywords ---\n  // fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\n  const angryKeywords = [\"1721\", \"779\", \"470\", \"10481\", \"192913\", \"14643\", \"3070\", \"9748\"];\n  // --- HAPPY Keywords ---\n  //happy 231591, love 9673, sports documentary 159290, nature documentary 221355, happiness 154060, family 18035, magic 2343\n  const happyKeywords = [\"231591\", \"9673\", \"159290\", \"221355\", \"154060\", \"18035\", \"2343\"];\n\n  // entertainer 1491, happy 231591, comedy 248206\n  const tiredKeywords = [\"1491\", \"231591\", \"248206\"];\n\n  //---------\n\n\n  // --- SPRING Keywords ---\n  // spring break 158054, game 18249, party 8508, young adult 206298\n  const springKeywords = [\"158054\", \"18249\", \"8508\", \"206298\"];\n\n  // --- SUMMER Keywords ---\n  // summer 13088, summer camp 5767, beach 966, resort 10793, family secrets, teenage girl, family relationships\n  const summerKeywords = [\"13088\", \"5767\", \"966\", \"10793\", \"6625\", \"10809\", \"10235\"];\n\n  // --- WINTER Keywords ---\n  // winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\n  const winterKeywords = [\"1442\", \"10794\", \"207317\", \"186466\"];\n\n  // --- AUTUMN Keywords ---\n  // autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\n  const autumnKeywords = [\"178883\", \"3335\", \"9694\", \"8087\", \"1299\", \"3133\", \"6152\"];\n\n  // RANDOM Keywords Holder\n  // Array to store random keywords\n  // Used to merge two arrays together\n  let mergedKeywordsHolder = [];\n\n  // Selected ramdom number from mergedKeywordsHolder array\n  let selectedKeywords = [];\n\n  // -------\n\n\n  // HAPPY USER MOOD OPTIONS\n  const moodBasedMovies = () => {\n    mergedKeywordsHolder = []; // clear the array\n    selectedKeywords = []; // clear the array\n\n\n    // CHECK IF IT IS SPRING\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = [...happyKeywords] // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    // Call this fucntion to filter movies\n    filterMovieKeywords();\n    fetchMoodBasedMovies();\n\n  }\n\n  // HAPPY USER MOOD OPTIONS\n  const seasonBasedMovies = () => {\n    mergedKeywordsHolder = []; // clear the array\n    selectedKeywords = []; // clear the array\n\n\n    // CHECK IF IT IS SPRING\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = [...happyKeywords] // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = [...happyKeywords]; // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    // Call this fucntion to filter movies\n    filterMovieKeywords();\n    fetchSeasonBasedMovies();\n\n  }\n\n\n  // HAPPY USER MOOD OPTIONS\n  const happyMood = () => {\n    mergedKeywordsHolder = []; // clear the array\n    selectedKeywords = []; // clear the array\n\n    // CHECK IF IT IS SPRING\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = happyKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = happyKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = happyKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    // Call this fucntion to filter movies\n    filterMovieKeywords();\n    fetchRecommendedMovies();\n\n  }\n\n  // TIRED USER MOOD OPTIONS\n  const tiredMood = () => {\n\n    genre = \"35|10770|53\";\n    mergedKeywordsHolder = []; // clear the array\n    selectedKeywords = []; // clear the array\n\n    // CHECK IF IT IS SPRING\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    // Call this fucntion to filter movies\n    filterMovieKeywords();\n    fetchRecommendedMovies();\n\n  }\n\n  // SAD USER MOOD OPTIONS\n  const sadMood = () => {\n\n    genre = \"35|10770|53\";\n    mergedKeywordsHolder = []; // clear the array\n    selectedKeywords = []; // clear the array\n\n    // CHECK IF IT IS SPRING\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    // Call this fucntion to filter movies\n    filterMovieKeywords();\n    fetchRecommendedMovies();\n\n  }\n\n  // ANGRY USER MOOD OPTIONS\n  const angryMood = () => {\n\n    genre = \"28|80|10759|12\";\n    mergedKeywordsHolder = []; // clear the array\n    selectedKeywords = []; // clear the array\n\n    // CHECK IF IT IS SPRING\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = angryKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = angryKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = angryKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    else {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = angryKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    }\n    // Call this fucntion to filter movies\n    filterMovieKeywords();\n    fetchRecommendedMovies();\n\n  }\n\n\n  // FUNCTION TO FILTER ANGRY MOOD MOVIES\n  function filterMovieKeywords() {\n    // loop to get 5 random values from array angryKeywords and store it in the array randomKeywordsHolder\n    for (var i = 0; i < 5; i++) {\n      var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n      while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) { // check if the last value is not the same as the new one\n        pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)];\n      }\n      selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n    }\n    // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n    keyword1 = selectedKeywords[0];\n    keyword2 = selectedKeywords[1];\n    keyword3 = selectedKeywords[2];\n    keyword4 = selectedKeywords[3];\n    keyword5 = selectedKeywords[4];\n\n    // Generate random year between 2010 and 2020\n    randomYear = getRndInteger(2010, 2020);\n    console.log(\"selected keys \", selectedKeywords);\n    console.log(\"keywords \", keyword1, keyword2, keyword3, keyword4, keyword5);\n  }\n\n\n  // FUNCTION TO GENERATE RANDOM YEAR\n  function getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  // GET VIDEO TRAILER\n  document.onclick = function (event) { // check for any event that happens in the page\n    const target = event.target; // store the content from the \"event\" into the variable target\n    if (target.tagName.toLowerCase() === \"img\") { // change the image name to lower case and check if it is equal to \"img\"\n      console.log(target);\n      const movie_id = target.attributes.id.value; // get movie ID\n      console.log(\"Movie ID: \", movie_id);\n\n      const fetchTrailer = async () => {\n        const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n        const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n        const data = await response.json();\n        console.log(\"Trailer List: \", data.results);\n        setTrailerList(data.results);\n\n        // check if there is a trailer available\n        if (data.results.length === 0) {\n          console.log(\"No trailer found\");\n          setmodalIsOpen(true);\n        }\n\n      }\n      fetchTrailer();\n      setShowOverlay(\"overlay active\");\n    }\n  }\n\n  const fetchRecommendedMovies = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"REC List: \", data.results);\n    console.log(response);\n    setRecommendedMovieList(data.results);\n    console.log(\"Month: \" + month);\n\n  }\n\n\n  const fetchMoodBasedMovies = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"REC List: \", data.results);\n    console.log(response);\n    setMoodBasedMovieList(data.results);\n    console.log(\"Month: \" + month);\n\n  }\n\n  const fetchSeasonBasedMovies = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"REC List: \", data.results);\n    console.log(response);\n    setSeasonBasedMovieList(data.results);\n    console.log(\"Month: \" + month);\n\n  }\n\n\n  // GET CURRENT MONTH\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  month = months[currentDate.getMonth()];\n\n  // GET THE RIGHT SEASON\n  function getSeason() {\n    if (month === \"December\" || month === \"January\" || month === \"February\") {\n      //console.log(\"Winter\");\n      season = \"Winter\";\n    }\n    else if (month === \"March\" || month === \"April\" || month === \"May\") {\n      //console.log(\"Spring\");\n      season = \"Spring\";\n    }\n    else if (month === \"June\" || month === \"July\" || month === \"August\") {\n      //console.log(\"Summer\");\n      season = \"Summer\";\n    }\n    else {\n      //console.log(\"Autumn\");\n      season = \"Autumn\";\n    }\n    return season;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={showOverlay} onClick={() => { setShowOverlay(\"overlay\"); setTrailerList([]); }}></div>\n\n      <NavigationBar />\n\n\n      {isUserMoodActive &&\n        <h3>Recommended For You</h3>}\n      <div className=\"recommended-movies-container\">\n        {recommendedMovieList.map(movie => (\n          <RecommendedMovies\n            key={movie.id}\n            title={movie.title}\n            poster={IMG_URL_LQ + movie.poster_path}\n            movie_id={movie.id}\n          />\n        ))}\n      </div>\n\n      <div className=\"ads\">\n        <img src={require('./img/smallads.gif')} alt=\"\" />\n      </div>\n\n      <h3>Up Coming</h3>\n      <MovieList URL=\"/movie/upcoming\" />\n\n      <h3>Mood Based</h3>\n      <div className=\"recommended-movies-container\">\n        {moodBasedMovieList.map(movie => (\n          <RecommendedMovies\n            key={movie.id}\n            title={movie.title}\n            poster={IMG_URL_LQ + movie.poster_path}\n            movie_id={movie.id}\n          />\n        ))}\n      </div>\n\n      <div className=\"ads\">\n        <img src={require('./img/bigads.jpg')} alt=\"\" />\n      </div>\n\n      <h3>Now Playing</h3>\n      <MovieList URL=\"/movie/now_playing\" />\n\n      <h3>Season Based Movies</h3>\n      <div className=\"recommended-movies-container\">\n        {seasonBasedMovieList.map(movie => (\n          <RecommendedMovies\n            key={movie.id}\n            title={movie.title}\n            poster={IMG_URL_LQ + movie.poster_path}\n            movie_id={movie.id}\n          />\n        ))}\n      </div>\n\n\n      <div className=\"ads\">\n        <img src={require('./img/bigads.jpg')} alt=\"\" />\n      </div>\n\n      <h3>Popular Movies</h3>\n      <MovieList URL=\"/movie/popular\" />\n\n\n      <div className=\"trailer-container\">\n        {trailerList.slice(0, 1).map(trailer => (\n          <Trailer\n            key={trailer.key}\n            trailer_key={trailer.key}\n          />\n        ))}\n      </div>\n\n      <Modal isOpen={modalIsOpen} onRequestClose={() => { setmodalIsOpen(false); setShowOverlay(\"overlay\"); }} style={customStyles}>\n        <p>SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE</p>\n      </Modal>\n\n    </div>\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}