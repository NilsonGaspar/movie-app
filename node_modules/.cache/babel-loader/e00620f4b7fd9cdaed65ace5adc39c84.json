{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/MoodBasedOnly.js\";\nimport React, { useEffect, useState, useReducer } from 'react';\nimport axios from 'axios';\nconst initialState = {\n  loading: true,\n  error: \"\",\n  movie: {}\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"Fecth_Success\":\n      return {\n        loading: false,\n        movie: action.payload,\n        error: \"\"\n      };\n\n    case \"Fetch_Error\":\n      return {\n        loading: false,\n        movie: {},\n        error: \"Something went wrong\"\n      };\n\n    default:\n      return state;\n  }\n};\n\nfunction MoodBasedOnly() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=fb1090731e2fd7eea03536049722f122&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`).then(response => {\n      dispatch({\n        type: \"Fetch_Success\",\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: \"Fetch_Error\"\n      });\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, isError && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \"Something went wrong...\"), isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 14\n    }\n  }, \" \", movies.map(movie => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-list\",\n    key: movie.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://image.tmdb.org/t/p/w500\" + movie.poster_path,\n    id: movie.id,\n    alt: movie.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-play\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  })))));\n}\n\nexport default MoodBasedOnly;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/MoodBasedOnly.js"],"names":["React","useEffect","useState","useReducer","axios","initialState","loading","error","movie","reducer","state","action","type","payload","MoodBasedOnly","dispatch","get","randomYear","genre","keyword1","keyword2","keyword3","keyword4","keyword5","then","response","data","catch","isError","isLoading","movies","map","id","poster_path","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,IADQ;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAO;AACHN,QAAAA,OAAO,EAAE,KADN;AAEHE,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAFX;AAGHN,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKA,SAAK,aAAL;AACA,aAAO;AACHD,QAAAA,OAAO,EAAE,KADN;AAEHE,QAAAA,KAAK,EAAE,EAFJ;AAGHD,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKA;AACA,aAAOG,KAAP;AAdR;AAgBH,CAjBD;;AAmBA,SAASI,aAAT,GAAyB;AAEjB,QAAM,CAACJ,KAAD,EAAQK,QAAR,IAAoBZ,UAAU,CAACM,OAAD,EAAUJ,YAAV,CAApC;AAEJJ,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,KAAK,CACJY,GADD,CACM,gMAA+LC,UAAW,sBAAqBC,KAAM,kBAAiBC,QAAS,IAAGC,QAAS,IAAGC,QAAS,IAAGC,QAAS,IAAGC,QAAS,EADrT,EAECC,IAFD,CAEMC,QAAQ,IAAI;AACdV,MAAAA,QAAQ,CAAC;AAACH,QAAAA,IAAI,EAAE,eAAP;AAAwBC,QAAAA,OAAO,EAAEY,QAAQ,CAACC;AAA1C,OAAD,CAAR;AACH,KAJD,EAKCC,KALD,CAKOpB,KAAK,IAAI;AACZQ,MAAAA,QAAQ,CAAC;AAACH,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACH,KAPD;AAQH,GATQ,EASN,EATM,CAAT;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCgB,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADZ,EAGCC,SAAS,gBACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADU,gBAEL;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAgDC,MAAM,CAACC,GAAP,CAAWvB,KAAK,iBAC7D;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,GAAG,EAAEA,KAAK,CAACwB,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,GAAG,EAAE,oCAAoCxB,KAAK,CAACyB,WAApD;AAAiE,IAAA,EAAE,EAAEzB,KAAK,CAACwB,EAA3E;AAA+E,IAAA,GAAG,EAAExB,KAAK,CAAC0B,KAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA;AAAQ,IAAA,SAAS,EAAC,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CAD6C,CAAhD,CALL,CADJ;AAiBH;;AAED,eAAepB,aAAf","sourcesContent":["import React, { useEffect, useState, useReducer } from 'react';\nimport axios from 'axios';\n\nconst initialState = {\n    loading: true,\n    error: \"\",\n    movie: {}\n}\n\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case \"Fecth_Success\":\n            return {\n                loading: false,\n                movie: action.payload,\n                error: \"\"\n            }\n            case \"Fetch_Error\": \n            return {\n                loading: false,\n                movie: {},\n                error: \"Something went wrong\"\n            }\n            default:\n            return state\n    }\n}\n\nfunction MoodBasedOnly() {\n  \n        const [state, dispatch] = useReducer(reducer, initialState)\n\n    useEffect(() => {\n        axios\n        .get(`https://api.themoviedb.org/3/discover/movie?api_key=fb1090731e2fd7eea03536049722f122&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`)\n        .then(response => {\n            dispatch({type: \"Fetch_Success\", payload: response.data})\n        })\n        .catch(error => {\n            dispatch({type: \"Fetch_Error\"})\n        })\n    }, []);\n\n    return (\n        <div className=\"recommended-movies\">\n        {isError && <div>Something went wrong...</div>}\n\n        {isLoading ? (\n        <div>Loading...</div>\n        ) : (<div className=\"recommended-movies-container\"> {movies.map(movie => (\n                <div className=\"movie-list\" key={movie.id}>\n                <img src={\"https://image.tmdb.org/t/p/w500\" + movie.poster_path} id={movie.id} alt={movie.title} />\n                <button className=\"btn-play\"></button>\n                </div>\n            ))}</div>\n            )}\n\n        </div>\n    )\n \n}\n\nexport default MoodBasedOnly"]},"metadata":{},"sourceType":"module"}