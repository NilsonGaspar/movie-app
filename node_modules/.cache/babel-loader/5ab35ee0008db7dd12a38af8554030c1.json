{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Movie from './getMovie';\nimport Trailer from './getTrailer';\nimport './App.css';\n\nfunction App() {\n  const API_KEY = \"fb1090731e2fd7eea03536049722f122\";\n  const IMG_URL = \"https://image.tmdb.org/t/p/w500\";\n  const RECOMMENDED_MOVIES_PATH = \"/discover/movie\";\n  const UPCOMING_PATH = \"/movie/upcoming\";\n  const NOWPLAYING_PATH = \"/movie/now_playing\";\n  const POPULAR_PATH = \"/movie/popular\";\n  const [upComingMovieList, setUpComingMovieList] = useState([]); // UP COMING MOVIE LIST\n\n  const [nowPlayingMovieList, setNowPlayingMovieList] = useState([]); // NOW PLAYING MOVIE LIST\n\n  const [popularMovieList, setPopularMovieList] = useState([]); // POPULAR MOVIE LIST\n\n  const [trailerList, setTrailerList] = useState([]); // TRAILER LIST\n\n  const [recommendedMovieList, setRecommendedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\n\n  const [moodBasedMovieList, setMoodBasedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\n\n  let genre;\n  let randomYear;\n  let keyword1;\n  let keyword2;\n  let keyword3;\n  let keyword4;\n  let keyword5;\n  var active1 = \"\"; // ARRAYS\n  // --- ANGRY Keywords ---\n  // fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\n\n  const angryKeywords = [\"1721\", \"779\", \"470\", \"10481\", \"192913\", \"14643\", \"3070\", \"9748\"]; // --- HAPPY Keywords ---\n  //happy 231591, love 9673, sports documentary 159290, nature documentary \n\n  const happyKeywords = [\"231591\", \"9673\", \"159290\", \"221355\", \"192913\", \"14643\", \"3070\", \"9748\"]; // entertainer 1491, happy 231591, comedy 248206\n\n  const tiredKeywords = [\"1491\", \"231591\", \"248206\"]; // --- SPRING Keywords ---\n  // spring break 158054, game 18249, party 8508, young adult 206298\n\n  const springKeywords = [\"158054\", \"18249\", \"8508\", \"206298\"]; // --- SUMMER Keywords ---\n  // summer 13088, summer camp 5767, beach 966, resort 10793\n\n  const summerKeywords = [\"13088\", \"5767\", \"966\", \"10793\"]; // --- WINTER Keywords ---\n  // winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\n\n  const winterKeywords = [\"1442\", \"10794\", \"207317\", \"186466\"]; // --- AUTUMN Keywords ---\n  // autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\n\n  const autumnKeywords = [\"178883\", \"3335\", \"9694\", \"8087\", \"1299\", \"3133\", \"6152\"]; // RANDOM Keywords Holder\n  // Array to store random keywords\n  // Used to merge two arrays together\n\n  let mergedKeywordsHolder = []; // Selected ramdom number from mergedKeywordsHolder array\n\n  let selectedKeywords = []; // -------\n\n  useEffect(() => {\n    //  moodBased()\n    getUpComingMovieList();\n    getPopularMovieList();\n    getNowPlayingMovieList();\n  }, []); // UP COMING MOVIE LIST\n\n  const getUpComingMovieList = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${UPCOMING_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n    const data = await response.json();\n    console.log(\"Movie List \", data.results);\n    setUpComingMovieList(data.results);\n  }; // POPULAR MOVIE LIST\n\n\n  const getPopularMovieList = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${POPULAR_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n    const data = await response.json();\n    console.log(\"Movie List \", data.results);\n    setPopularMovieList(data.results);\n  }; // POPULAR MOVIE LIST\n\n\n  const getNowPlayingMovieList = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3${NOWPLAYING_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n    const data = await response.json();\n    console.log(\"Movie List \", data.results);\n    setNowPlayingMovieList(data.results);\n  }; // HAPPY USER MOOD OPTIONS\n\n\n  const happyMood = async () => {\n    genre = \"28|35|10759|12|18|9648\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n\n    console.log(mergedKeywordsHolder);\n    filterMovieKeywords();\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&append_to_response=images&include_image_language=en,null&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n    setRecommendedMovieList(data.results);\n  }; // ANGRY USER MOOD OPTIONS\n\n\n  const angryMood = async () => {\n    genre = \"28|80|10759|12\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = angryKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n\n    filterMovieKeywords();\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"Movie List Angry Mood: \", data.results, \"Year: \", randomYear);\n    setRecommendedMovieList(data.results);\n  }; // USER MOOD OPTIONS\n\n\n  const moodBased = async () => {\n    genre = \"28|35|10759|12|18|9648\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n\n    console.log(mergedKeywordsHolder);\n    filterMovieKeywords();\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n    setMoodBasedMovieList(data.results);\n  }; // FUNCTION TO FILTER ANGRY MOOD MOVIES\n\n\n  function filterMovieKeywords() {\n    // loop to get 6 random values from array angryKeywords and store it in the array randomKeywordsHolder\n    for (var i = 0; i < 5; i++) {\n      var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n\n      while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) {\n        // check if the last value is not the same as the new one\n        pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)];\n      }\n\n      selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n    } // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n\n\n    keyword1 = selectedKeywords[0];\n    keyword2 = selectedKeywords[1];\n    keyword3 = selectedKeywords[2];\n    keyword4 = selectedKeywords[3];\n    keyword5 = selectedKeywords[4]; // Generate random year between 2010 and 2020\n\n    randomYear = getRndInteger(2010, 2020);\n    console.log(\"selected keys \", selectedKeywords);\n    console.log(\"keywords \", keyword1, keyword2, keyword3, keyword4, keyword5);\n  } // FUNCTION TO GENERATE RANDOM YEAR\n\n\n  function getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } // GET VIDEO TRAILER\n\n\n  document.onclick = function (event) {\n    // check for any event that happens in the page\n    const target = event.target; // store the content from the \"event\" into the variable target\n\n    if (target.tagName.toLowerCase() === \"img\") {\n      // change the image name to lower case and check if it is equal to \"img\"\n      console.log(target);\n      const movie_id = target.attributes.id.value; // get movie ID\n\n      console.log(\"Movie ID: \", movie_id);\n\n      const getTrailer = async () => {\n        const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n\n        const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n        const data = await response.json();\n        console.log(\"Trailer List: \", data.results);\n        setTrailerList(data.results); // check if there is a trailer available\n\n        if (data.results.length === 0) {\n          console.log(\"No trailer found\");\n          return;\n        }\n      };\n\n      getTrailer();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"index.html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 26\n    }\n  }, \"fastMovie\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mood-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mood-status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, \"How Are You Feeling Today?\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-happy\",\n    onClick: () => happyMood(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, \"Happy\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-sad\",\n    onClick: () => getUpComingMovieList(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }, \"Sad\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-tired\",\n    onClick: () => angryMood(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }, \"Angry\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-angry\",\n    onClick: () => angryMood(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }, \"Angry\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 5\n    }\n  }, \"Recommended For You\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 5\n    }\n  }, recommendedMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL + movie.backdrop_path,\n    backdrop: IMG_URL + movie.backdrop_path,\n    rating: movie.vote_average,\n    title: movie.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }, \"For Your Mood\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mood-based-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }\n  }, moodBasedMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL + movie.poster_path,\n    rating: movie.vote_average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }\n  }, \"Up Coming\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }\n  }, upComingMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL + movie.poster_path,\n    rating: movie.vote_average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }\n  }, \"Popular\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }\n  }, popularMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL + movie.poster_path,\n    rating: movie.vote_average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }\n  }, \"Now Playing\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }\n  }, nowPlayingMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL + movie.poster_path,\n    rating: movie.vote_average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trailer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }\n  }, trailerList.slice(0, 1).map(trailer => /*#__PURE__*/React.createElement(Trailer, {\n    key: trailer.key,\n    trailer_key: trailer.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js"],"names":["React","useEffect","useState","Movie","Trailer","App","API_KEY","IMG_URL","RECOMMENDED_MOVIES_PATH","UPCOMING_PATH","NOWPLAYING_PATH","POPULAR_PATH","upComingMovieList","setUpComingMovieList","nowPlayingMovieList","setNowPlayingMovieList","popularMovieList","setPopularMovieList","trailerList","setTrailerList","recommendedMovieList","setRecommendedMovieList","moodBasedMovieList","setMoodBasedMovieList","genre","randomYear","keyword1","keyword2","keyword3","keyword4","keyword5","active1","angryKeywords","happyKeywords","tiredKeywords","springKeywords","summerKeywords","winterKeywords","autumnKeywords","mergedKeywordsHolder","selectedKeywords","getUpComingMovieList","getPopularMovieList","getNowPlayingMovieList","response","fetch","data","json","console","log","results","happyMood","concat","filterMovieKeywords","angryMood","moodBased","i","pickedKeyword","Math","floor","random","length","lastIndexOf","push","getRndInteger","min","max","document","onclick","event","target","tagName","toLowerCase","movie_id","attributes","id","value","getTrailer","TRAILER_PATH","map","movie","backdrop_path","vote_average","title","poster_path","slice","trailer","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Movie from './getMovie';\nimport Trailer from './getTrailer';\nimport './App.css';\n\nfunction App() {\n\nconst API_KEY = \"fb1090731e2fd7eea03536049722f122\";\nconst IMG_URL = \"https://image.tmdb.org/t/p/w500\";\nconst RECOMMENDED_MOVIES_PATH = \"/discover/movie\";\nconst UPCOMING_PATH = \"/movie/upcoming\";\nconst NOWPLAYING_PATH = \"/movie/now_playing\";\nconst POPULAR_PATH = \"/movie/popular\";\n\nconst [upComingMovieList, setUpComingMovieList] = useState([]); // UP COMING MOVIE LIST\nconst [nowPlayingMovieList, setNowPlayingMovieList] = useState([]); // NOW PLAYING MOVIE LIST\nconst [popularMovieList, setPopularMovieList] = useState([]); // POPULAR MOVIE LIST\nconst [trailerList, setTrailerList] = useState([]); // TRAILER LIST\nconst [recommendedMovieList, setRecommendedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\nconst [moodBasedMovieList, setMoodBasedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\n\n\nlet genre;\nlet randomYear;\nlet keyword1;\nlet keyword2;\nlet keyword3;\nlet keyword4;\nlet keyword5;\n\nvar active1 = \"\";\n\n// ARRAYS\n\n// --- ANGRY Keywords ---\n// fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\nconst angryKeywords = [\"1721\",\"779\",\"470\",\"10481\",\"192913\",\"14643\",\"3070\",\"9748\"];\n// --- HAPPY Keywords ---\n//happy 231591, love 9673, sports documentary 159290, nature documentary \nconst happyKeywords = [\"231591\",\"9673\",\"159290\",\"221355\",\"192913\",\"14643\",\"3070\",\"9748\"];\n\n// entertainer 1491, happy 231591, comedy 248206\nconst tiredKeywords = [\"1491\",\"231591\",\"248206\"];\n\n// --- SPRING Keywords ---\n// spring break 158054, game 18249, party 8508, young adult 206298\nconst springKeywords = [\"158054\",\"18249\",\"8508\",\"206298\"];\n\n// --- SUMMER Keywords ---\n// summer 13088, summer camp 5767, beach 966, resort 10793\nconst summerKeywords = [\"13088\",\"5767\",\"966\",\"10793\"];\n\n// --- WINTER Keywords ---\n// winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\nconst winterKeywords = [\"1442\",\"10794\",\"207317\",\"186466\"];\n\n// --- AUTUMN Keywords ---\n// autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\nconst autumnKeywords = [\"178883\",\"3335\",\"9694\",\"8087\",\"1299\",\"3133\",\"6152\"];\n\n// RANDOM Keywords Holder\n// Array to store random keywords\n// Used to merge two arrays together\nlet mergedKeywordsHolder = []; \n\n// Selected ramdom number from mergedKeywordsHolder array\nlet selectedKeywords = [];\n\n// -------\n\n\nuseEffect(() => {\n//  moodBased()\n  getUpComingMovieList()\n  getPopularMovieList()\n  getNowPlayingMovieList()\n\n}, []);\n\n// UP COMING MOVIE LIST\nconst getUpComingMovieList = async () => {\n  const response = await fetch(`https://api.themoviedb.org/3${UPCOMING_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n  const data = await response.json();\n  console.log(\"Movie List \", data.results);\n  setUpComingMovieList(data.results);\n}\n\n// POPULAR MOVIE LIST\nconst getPopularMovieList = async () => {\n  const response = await fetch(`https://api.themoviedb.org/3${POPULAR_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n  const data = await response.json();\n  console.log(\"Movie List \", data.results);\n  setPopularMovieList(data.results);\n}\n\n// POPULAR MOVIE LIST\nconst getNowPlayingMovieList = async () => {\n  const response = await fetch(`https://api.themoviedb.org/3${NOWPLAYING_PATH}?api_key=${API_KEY}&language=en-GB&include_image_language=en,null`);\n  const data = await response.json();\n  console.log(\"Movie List \", data.results);\n  setNowPlayingMovieList(data.results);\n}\n\n\n// HAPPY USER MOOD OPTIONS\nconst happyMood = async () => {\n  genre = \"28|35|10759|12|18|9648\";\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n  mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  console.log(mergedKeywordsHolder);\n\n  filterMovieKeywords()\n\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&append_to_response=images&include_image_language=en,null&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n  setRecommendedMovieList(data.results);\n}\n\n// ANGRY USER MOOD OPTIONS\nconst angryMood = async () => {\n  genre = \"28|80|10759|12\";\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n  mergedKeywordsHolder = angryKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  filterMovieKeywords()\n\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"Movie List Angry Mood: \", data.results, \"Year: \", randomYear);\n  setRecommendedMovieList(data.results);\n\n}\n\n// USER MOOD OPTIONS\nconst moodBased = async () => {\n  genre = \"28|35|10759|12|18|9648\";\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n  mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  console.log(mergedKeywordsHolder);\n\n  filterMovieKeywords()\n\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n  setMoodBasedMovieList(data.results);\n}\n\n\n// FUNCTION TO FILTER ANGRY MOOD MOVIES\nfunction filterMovieKeywords() {\n  // loop to get 6 random values from array angryKeywords and store it in the array randomKeywordsHolder\n  for (var i = 0; i < 5; i++) { \n    var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random()*mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n    while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) { // check if the last value is not the same as the new one\n      pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random()*mergedKeywordsHolder.length)];\n    }\n    selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n}\n  // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n  keyword1 = selectedKeywords[0];\n  keyword2 = selectedKeywords[1];\n  keyword3 = selectedKeywords[2];\n  keyword4 = selectedKeywords[3];\n  keyword5 = selectedKeywords[4];\n\n  // Generate random year between 2010 and 2020\nrandomYear = getRndInteger(2010, 2020);\nconsole.log(\"selected keys \", selectedKeywords)\n console.log(\"keywords \",keyword1, keyword2, keyword3, keyword4,keyword5)\n}\n\n// FUNCTION TO GENERATE RANDOM YEAR\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n// GET VIDEO TRAILER\ndocument.onclick = function (event) { // check for any event that happens in the page\n  const target = event.target; // store the content from the \"event\" into the variable target\n  if (target.tagName.toLowerCase() === \"img\") { // change the image name to lower case and check if it is equal to \"img\"\n  console.log(target);\n  const movie_id = target.attributes.id.value; // get movie ID\n  console.log(\"Movie ID: \", movie_id);\n\n  \n  const getTrailer = async () => {\n    const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n    const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n    const data = await response.json();\n    console.log(\"Trailer List: \", data.results);\n    setTrailerList(data.results);\n\n  // check if there is a trailer available\n  if (data.results.length === 0) {\n    console.log(\"No trailer found\");\n    \n  return;\n  }\n\n  }\n  getTrailer();\n  }\n}\n\n\nreturn (\n  <div className=\"App\">\n\n    <h1 className=\"logo\"><a href=\"index.html\">fastMovie</a></h1>\n      \n    <div className=\"mood-options\">\n      <p className=\"mood-status\">How Are You Feeling Today?</p>\n      <button className=\"btn-happy\" onClick={() => happyMood()}>Happy</button>\n      <button className=\"btn-sad\" onClick={() => getUpComingMovieList()}>Sad</button>\n      <button className=\"btn-tired\" onClick={() => angryMood()}>Angry</button>\n      <button className=\"btn-angry\" onClick={() => angryMood()}>Angry</button>\n    </div>\n\n    <h3>Recommended For You</h3>\n    <div className=\"recommended-movies-container\">\n      {recommendedMovieList.map(movie => (\n        <Movie \n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL + movie.backdrop_path}\n        backdrop={IMG_URL + movie.backdrop_path}\n        rating= {movie.vote_average}\n        title= {movie.title} />\n      ))}\n      </div>\n\n      <h3>For Your Mood</h3>\n      <div className=\"mood-based-movies-container\">\n      {moodBasedMovieList.map(movie => (\n        <Movie\n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL + movie.poster_path}\n        rating= {movie.vote_average}\n         />\n      ))}\n      </div>\n\n\n      <h3>Up Coming</h3>\n      <div className=\"movie-container\">\n      {upComingMovieList.map(movie => (\n        <Movie\n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL + movie.poster_path} \n        rating= {movie.vote_average} />\n      ))}\n      </div>\n\n      <h3>Popular</h3>\n      <div className=\"movie-container\">\n      {popularMovieList.map(movie => (\n        <Movie \n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL + movie.poster_path} \n        rating= {movie.vote_average} />\n      ))}\n      </div>\n      \n      <h3>Now Playing</h3>\n      <div className=\"movie-container\">\n      {nowPlayingMovieList.map(movie => (\n        <Movie \n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL + movie.poster_path} \n        rating= {movie.vote_average} />\n      ))}\n      </div>\n\n      <div className=\"trailer-container\">    \n      {trailerList.slice(0, 1).map(trailer => (\n        <Trailer\n        key= {trailer.key}\n        trailer_key= {trailer.key}\n      />\n      ))}\n      </div>\n\n\n  </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}