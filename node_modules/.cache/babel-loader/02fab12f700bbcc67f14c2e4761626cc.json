{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/RecommendedMovies.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nlet genre;\nlet randomYear;\nlet keyword1;\nlet keyword2;\nlet keyword3;\nlet keyword4;\nlet keyword5;\nlet season;\nlet month;\nlet currentDate = new Date(); // variable to store date\n// ARRAYS\n// --- ANGRY Keywords ---\n// fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\n\nconst angryKeywords = [\"1721\", \"779\", \"470\", \"10481\", \"192913\", \"14643\", \"3070\", \"9748\"]; // --- HAPPY Keywords ---\n//happy 231591, love 9673, sports documentary 159290, nature documentary 221355, happiness 154060, family 18035, magic 2343\n\nconst happyKeywords = [\"231591\", \"9673\", \"159290\", \"221355\", \"154060\", \"18035\", \"2343\"]; // entertainer 1491, happy 231591, comedy 248206\n\nconst tiredKeywords = [\"1491\", \"231591\", \"248206\"]; // --- SPRING Keywords ---\n// spring break 158054, game 18249, party 8508, young adult 206298\n\nconst springKeywords = [\"158054\", \"18249\", \"8508\", \"206298\"]; // --- SUMMER Keywords ---\n// summer 13088, summer camp 5767, beach 966, resort 10793, family secrets, teenage girl, family relationships\n\nconst summerKeywords = [\"13088\", \"5767\", \"966\", \"10793\", \"6625\", \"10809\", \"10235\"]; // --- WINTER Keywords ---\n// winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\n\nconst winterKeywords = [\"1442\", \"10794\", \"207317\", \"186466\"]; // --- AUTUMN Keywords ---\n// autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\n\nconst autumnKeywords = [\"178883\", \"3335\", \"9694\", \"8087\", \"1299\", \"3133\", \"6152\"]; // RANDOM Keywords Holder\n// Array to store random keywords\n// Used to merge two arrays together\n\nlet mergedKeywordsHolder = []; // Selected ramdom number from mergedKeywordsHolder array\n\nlet selectedKeywords = []; // -------\n// GET CURRENT MONTH\n\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nmonth = months[currentDate.getMonth()];\nconsole.log(\"Month: \" + month); // GET THE RIGHT SEASON\n\nfunction getSeason() {\n  if (month === \"December\" || month === \"January\" || month === \"February\") {\n    //console.log(\"Winter\");\n    season = \"Winter\";\n  } else if (month === \"March\" || month === \"April\" || month === \"May\") {\n    //console.log(\"Spring\");\n    season = \"Spring\";\n  } else if (month === \"June\" || month === \"July\" || month === \"August\") {\n    //console.log(\"Summer\");\n    season = \"Summer\";\n  } else {\n    //console.log(\"Autumn\");\n    season = \"Autumn\";\n  }\n\n  return season;\n} // HAPPY USER MOOD OPTIONS\n\n\nconst tiredMoodTest = () => {\n  genre = \"35|10770|53\"; // CHECK IF IT IS SPRING\n\n  if (getSeason() === \"Spring\") {\n    console.log(\"It's Spring\");\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion to filter movies\n\n    filterMovieKeywords();\n  } else if (getSeason() === \"Summer\") {\n    console.log(\"It's Summer\");\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion to filter movies\n\n    filterMovieKeywords();\n  } else if (getSeason() === \"Winter\") {\n    console.log(\"It's winter\");\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion\n\n    filterMovieKeywords();\n  } else if (getSeason() === \"Autumn\") {\n    console.log(\"It's Autumn\");\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion to filter movies\n\n    filterMovieKeywords();\n  }\n};\n\nfunction RecommendedMovies({\n  API_KEY,\n  g,\n  keyword1,\n  keyword2,\n  keyword3,\n  keyword4,\n  keyword5,\n  randomYear,\n  IMG_URL_LQ\n}) {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    const getData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const result = await axios(`https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${g}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n        setMovies(result.data.results);\n        console.log(\"List Data: \", result.data.results);\n      } catch (isError) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    getData();\n  }, [g]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popular-movies\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, isError && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }, \"Something went wrong...\"), isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 14\n    }\n  }, \" \", movies.map(movie => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: IMG_URL_LQ + movie.poster_path,\n    key: movie.id,\n    id: movie.id,\n    alt: movie.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  })))));\n}\n\nexport default RecommendedMovies;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/RecommendedMovies.js"],"names":["React","useEffect","useState","axios","genre","randomYear","keyword1","keyword2","keyword3","keyword4","keyword5","season","month","currentDate","Date","angryKeywords","happyKeywords","tiredKeywords","springKeywords","summerKeywords","winterKeywords","autumnKeywords","mergedKeywordsHolder","selectedKeywords","months","getMonth","console","log","getSeason","tiredMoodTest","concat","filterMovieKeywords","RecommendedMovies","API_KEY","g","IMG_URL_LQ","movies","setMovies","isLoading","setIsLoading","isError","setIsError","getData","result","data","results","map","movie","poster_path","id","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\n\nlet genre;\nlet randomYear;\nlet keyword1;\nlet keyword2;\nlet keyword3;\nlet keyword4;\nlet keyword5;\n\nlet season;\nlet month;\n\nlet currentDate = new Date(); // variable to store date\n\n// ARRAYS\n\n// --- ANGRY Keywords ---\n// fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\nconst angryKeywords = [\"1721\",\"779\",\"470\",\"10481\",\"192913\",\"14643\",\"3070\",\"9748\"];\n// --- HAPPY Keywords ---\n//happy 231591, love 9673, sports documentary 159290, nature documentary 221355, happiness 154060, family 18035, magic 2343\nconst happyKeywords = [\"231591\",\"9673\",\"159290\",\"221355\",\"154060\",\"18035\",\"2343\"];\n\n// entertainer 1491, happy 231591, comedy 248206\nconst tiredKeywords = [\"1491\",\"231591\",\"248206\"];\n\n// --- SPRING Keywords ---\n// spring break 158054, game 18249, party 8508, young adult 206298\nconst springKeywords = [\"158054\",\"18249\",\"8508\",\"206298\"];\n\n// --- SUMMER Keywords ---\n// summer 13088, summer camp 5767, beach 966, resort 10793, family secrets, teenage girl, family relationships\nconst summerKeywords = [\"13088\",\"5767\",\"966\",\"10793\",\"6625\",\"10809\",\"10235\"];\n\n// --- WINTER Keywords ---\n// winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\nconst winterKeywords = [\"1442\",\"10794\",\"207317\",\"186466\"];\n\n// --- AUTUMN Keywords ---\n// autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\nconst autumnKeywords = [\"178883\",\"3335\",\"9694\",\"8087\",\"1299\",\"3133\",\"6152\"];\n\n// RANDOM Keywords Holder\n// Array to store random keywords\n// Used to merge two arrays together\nlet mergedKeywordsHolder = []; \n\n// Selected ramdom number from mergedKeywordsHolder array\nlet selectedKeywords = [];\n\n// -------\n\n// GET CURRENT MONTH\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nmonth = months[currentDate.getMonth()];\nconsole.log(\"Month: \" + month);\n\n// GET THE RIGHT SEASON\nfunction getSeason() {\n  if (month === \"December\" || month === \"January\" || month === \"February\") {\n    //console.log(\"Winter\");\n    season = \"Winter\";\n  }\n  else if (month === \"March\" || month === \"April\" || month === \"May\") {\n    //console.log(\"Spring\");\n    season = \"Spring\";\n  }\n  else if (month === \"June\" || month === \"July\" || month === \"August\") {\n    //console.log(\"Summer\");\n    season = \"Summer\";\n  }\n  else {\n    //console.log(\"Autumn\");\n    season = \"Autumn\";\n  }\n  return season;\n}\n\n\n// HAPPY USER MOOD OPTIONS\nconst tiredMoodTest = () => {\n    genre = \"35|10770|53\";\n    // CHECK IF IT IS SPRING\n      if (getSeason() === \"Spring\") {\n        console.log(\"It's Spring\");\n        mergedKeywordsHolder = []; // clear the array\n        selectedKeywords = []; // clear the array\n        mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion to filter movies\n        filterMovieKeywords();\n      }\n      else if (getSeason() === \"Summer\") {\n        console.log(\"It's Summer\");\n        mergedKeywordsHolder = []; // clear the array\n        selectedKeywords = []; // clear the array\n        mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion to filter movies\n        filterMovieKeywords();\n      }\n      else if (getSeason() === \"Winter\") {\n        console.log(\"It's winter\");\n        mergedKeywordsHolder = []; // clear the array\n        selectedKeywords = []; // clear the array\n        mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n        // Call this fucntion\n        filterMovieKeywords();\n      }\n      else if (getSeason() === \"Autumn\") {\n        console.log(\"It's Autumn\");\n        mergedKeywordsHolder = []; // clear the array\n        selectedKeywords = []; // clear the array\n        mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n        // Call this fucntion to filter movies\n        filterMovieKeywords();\n      } \n  }\n  \n\n\nfunction RecommendedMovies({API_KEY, g, keyword1, keyword2, keyword3, keyword4, keyword5, randomYear, IMG_URL_LQ}) {\n    const [movies, setMovies] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    useEffect(() => {\n        const getData = async() => {\n            setIsError(false);\n            setIsLoading(true);\n\n            try {\n                const result = await axios(`https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${g}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n                setMovies(result.data.results);\n                console.log(\"List Data: \", result.data.results)\n            }\n            catch (isError) {\n                setIsError(true);\n            }\n            setIsLoading(false);\n        }\n        getData();\n    }, [g]);\n\n    return (\n        <div className=\"popular-movies\">\n        {isError && <div>Something went wrong...</div>}\n\n        {isLoading ? (\n        <div>Loading...</div>\n        ) : (<div className=\"movie-container\"> {movies.map(movie => (\n                <div className=\"movie-list\">\n                <img src={IMG_URL_LQ + movie.poster_path} key={movie.id} id={movie.id} alt={movie.title} />\n                </div>\n            ))}</div>\n            )}\n\n        </div>\n    )\n \n}\n\nexport default RecommendedMovies"]},"metadata":{},"sourceType":"module"}