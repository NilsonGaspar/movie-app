{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/RecommendedMovies.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nconst API_KEY = \"fb1090731e2fd7eea03536049722f122\";\nconst IMG_URL_LQ = \"https://image.tmdb.org/t/p/w500\";\nconst [keyword1, setKeyword1] = useState(\"\");\nconst [keyword2, setKeyword2] = useState(\"\");\nconst [keyword3, setKeyword3] = useState(\"\");\nconst [keyword4, setKeyword4] = useState(\"\");\nconst [keyword5, setKeyword5] = useState(\"\");\nconst [genre, setGenre] = useState(\"\");\nconst [randomYear, setRandomYear] = useState(\"\");\nlet season;\nlet month;\nlet currentDate = new Date(); // variable to store date\n// ARRAYS\n// --- ANGRY Keywords ---\n// fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\n\nconst angryKeywords = [\"1721\", \"779\", \"470\", \"10481\", \"192913\", \"14643\", \"3070\", \"9748\"]; // --- HAPPY Keywords ---\n//happy 231591, love 9673, sports documentary 159290, nature documentary 221355, happiness 154060, family 18035, magic 2343\n\nconst happyKeywords = [\"231591\", \"9673\", \"159290\", \"221355\", \"154060\", \"18035\", \"2343\"]; // entertainer 1491, happy 231591, comedy 248206\n\nconst tiredKeywords = [\"1491\", \"231591\", \"248206\"]; // --- SPRING Keywords ---\n// spring break 158054, game 18249, party 8508, young adult 206298\n\nconst springKeywords = [\"158054\", \"18249\", \"8508\", \"206298\"]; // --- SUMMER Keywords ---\n// summer 13088, summer camp 5767, beach 966, resort 10793, family secrets, teenage girl, family relationships\n\nconst summerKeywords = [\"13088\", \"5767\", \"966\", \"10793\", \"6625\", \"10809\", \"10235\"]; // --- WINTER Keywords ---\n// winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\n\nconst winterKeywords = [\"1442\", \"10794\", \"207317\", \"186466\"]; // --- AUTUMN Keywords ---\n// autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\n\nconst autumnKeywords = [\"178883\", \"3335\", \"9694\", \"8087\", \"1299\", \"3133\", \"6152\"]; // RANDOM Keywords Holder\n// Array to store random keywords\n// Used to merge two arrays together\n\nlet mergedKeywordsHolder = []; // Selected ramdom number from mergedKeywordsHolder array\n\nlet selectedKeywords = []; // -------\n\nfunction RecommendedMovies({\n  userMood\n}) {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    const getData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const result = await axios(`https://api.themoviedb.org/3/discover/movie?api_key=fb1090731e2fd7eea03536049722f122&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n        setMovies(result.data.results);\n        console.log(\"List Data: \", result.data.results);\n        console.log(\"List Data CEHCEK: \", result, genre, randomYear);\n      } catch (isError) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    getData();\n  }, [userMood]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, isError && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, \"Something went wrong...\"), isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 14\n    }\n  }, \" \", movies.map(movie => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-list\",\n    key: movie.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://image.tmdb.org/t/p/w500\" + movie.poster_path,\n    id: movie.id,\n    alt: movie.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-play\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  })))));\n}\n\nexport default RecommendedMovies;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/RecommendedMovies.js"],"names":["React","useEffect","useState","axios","API_KEY","IMG_URL_LQ","keyword1","setKeyword1","keyword2","setKeyword2","keyword3","setKeyword3","keyword4","setKeyword4","keyword5","setKeyword5","genre","setGenre","randomYear","setRandomYear","season","month","currentDate","Date","angryKeywords","happyKeywords","tiredKeywords","springKeywords","summerKeywords","winterKeywords","autumnKeywords","mergedKeywordsHolder","selectedKeywords","RecommendedMovies","userMood","movies","setMovies","isLoading","setIsLoading","isError","setIsError","getData","result","data","results","console","log","map","movie","id","poster_path","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst API_KEY = \"fb1090731e2fd7eea03536049722f122\";\nconst IMG_URL_LQ = \"https://image.tmdb.org/t/p/w500\";\n\nconst [keyword1, setKeyword1] = useState(\"\");\nconst [keyword2, setKeyword2] = useState(\"\");\nconst [keyword3, setKeyword3] = useState(\"\");\nconst [keyword4, setKeyword4] = useState(\"\");\nconst [keyword5, setKeyword5] = useState(\"\");\nconst [genre, setGenre] = useState(\"\");\nconst [randomYear, setRandomYear] = useState(\"\");\n\nlet season;\nlet month;\nlet currentDate = new Date(); // variable to store date\n\n// ARRAYS\n\n// --- ANGRY Keywords ---\n// fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\nconst angryKeywords = [\"1721\",\"779\",\"470\",\"10481\",\"192913\",\"14643\",\"3070\",\"9748\"];\n// --- HAPPY Keywords ---\n//happy 231591, love 9673, sports documentary 159290, nature documentary 221355, happiness 154060, family 18035, magic 2343\nconst happyKeywords = [\"231591\",\"9673\",\"159290\",\"221355\",\"154060\",\"18035\",\"2343\"];\n\n// entertainer 1491, happy 231591, comedy 248206\nconst tiredKeywords = [\"1491\",\"231591\",\"248206\"];\n\n// --- SPRING Keywords ---\n// spring break 158054, game 18249, party 8508, young adult 206298\nconst springKeywords = [\"158054\",\"18249\",\"8508\",\"206298\"];\n\n// --- SUMMER Keywords ---\n// summer 13088, summer camp 5767, beach 966, resort 10793, family secrets, teenage girl, family relationships\nconst summerKeywords = [\"13088\",\"5767\",\"966\",\"10793\",\"6625\",\"10809\",\"10235\"];\n\n// --- WINTER Keywords ---\n// winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\nconst winterKeywords = [\"1442\",\"10794\",\"207317\",\"186466\"];\n\n// --- AUTUMN Keywords ---\n// autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\nconst autumnKeywords = [\"178883\",\"3335\",\"9694\",\"8087\",\"1299\",\"3133\",\"6152\"];\n\n// RANDOM Keywords Holder\n// Array to store random keywords\n// Used to merge two arrays together\nlet mergedKeywordsHolder = []; \n\n// Selected ramdom number from mergedKeywordsHolder array\nlet selectedKeywords = [];\n\n// -------\n\n\n\n\nfunction RecommendedMovies({userMood}) {\n    const [movies, setMovies] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    useEffect(() => {\n        const getData = async() => {\n            setIsError(false);\n            setIsLoading(true);\n\n            try {\n                const result = await axios(`https://api.themoviedb.org/3/discover/movie?api_key=fb1090731e2fd7eea03536049722f122&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n                setMovies(result.data.results);\n                console.log(\"List Data: \", result.data.results)\n                console.log(\"List Data CEHCEK: \", result, genre, randomYear);\n\n            }\n            catch (isError) {\n                setIsError(true);\n            }\n            setIsLoading(false);\n        }\n        getData();\n    }, [userMood]);\n\n    return (\n        <div className=\"recommended-movies\">\n        {isError && <div>Something went wrong...</div>}\n\n        {isLoading ? (\n        <div>Loading...</div>\n        ) : (<div className=\"recommended-movies-container\"> {movies.map(movie => (\n                <div className=\"movie-list\" key={movie.id}>\n                <img src={\"https://image.tmdb.org/t/p/w500\" + movie.poster_path} id={movie.id} alt={movie.title} />\n                <button className=\"btn-play\"></button>\n                </div>\n            ))}</div>\n            )}\n\n        </div>\n    )\n \n}\n\nexport default RecommendedMovies"]},"metadata":{},"sourceType":"module"}