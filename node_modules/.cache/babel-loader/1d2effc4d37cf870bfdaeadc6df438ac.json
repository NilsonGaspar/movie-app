{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/MoodBasedOnly.js\";\nimport React, { useEffect, useState, useReducer } from 'react';\nimport axios from 'axios';\nconst initialState = {\n  loading: true,\n  error: \"\",\n  movie: {}\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"Fecth_Success\":\n      return {\n        loading: false,\n        movie: action.payload,\n        error: \"\"\n      };\n\n    case \"Fetch_Error\":\n      return {\n        loading: false,\n        movie: {},\n        error: \"Something went wrong\"\n      };\n\n    default:\n      return state;\n  }\n};\n\nfunction MoodBasedOnly({\n  genre,\n  randomYear,\n  moodkeyword1,\n  moodkeyword2,\n  moodkeyword3,\n  moodkeyword4,\n  moodkeyword5\n}) {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    const getData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const result = await axios(`https://api.themoviedb.org/3/discover/movie?api_key=fb1090731e2fd7eea03536049722f122&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${moodkeyword1}|${moodkeyword2}|${moodkeyword3}|${moodkeyword4}|${moodkeyword5}`);\n        setMovies(result.data.results);\n        console.log(\"List Data: \", result.data.results);\n        console.log(\"List Data CEHCEK: \", result, genre, randomYear);\n      } catch (isError) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    getData();\n  }, [moodkeyword1, moodkeyword2, moodkeyword3, moodkeyword4, moodkeyword5]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, isError && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, \"Something went wrong...\"), isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 14\n    }\n  }, \" \", movies.map(movie => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-list\",\n    key: movie.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://image.tmdb.org/t/p/w500\" + movie.poster_path,\n    id: movie.id,\n    alt: movie.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-play\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  })))));\n}\n\nexport default MoodBasedOnly;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/MoodBasedOnly.js"],"names":["React","useEffect","useState","useReducer","axios","initialState","loading","error","movie","reducer","state","action","type","payload","MoodBasedOnly","genre","randomYear","moodkeyword1","moodkeyword2","moodkeyword3","moodkeyword4","moodkeyword5","movies","setMovies","isLoading","setIsLoading","isError","setIsError","getData","result","data","results","console","log","map","id","poster_path","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,IADQ;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAO;AACHN,QAAAA,OAAO,EAAE,KADN;AAEHE,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAFX;AAGHN,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKA,SAAK,aAAL;AACA,aAAO;AACHD,QAAAA,OAAO,EAAE,KADN;AAEHE,QAAAA,KAAK,EAAE,EAFJ;AAGHD,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKA;AACA,aAAOG,KAAP;AAdR;AAgBH,CAjBD;;AAmBA,SAASI,aAAT,CAAuB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,UAAT;AAAqBC,EAAAA,YAArB;AAAmCC,EAAAA,YAAnC;AAAiDC,EAAAA,YAAjD;AAA+DC,EAAAA,YAA/D;AAA6EC,EAAAA;AAA7E,CAAvB,EAAmH;AAC/G,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACwB,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAC,KAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM2B,OAAO,GAAG,YAAW;AACvBD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAI;AACA,cAAMI,MAAM,GAAG,MAAMzB,KAAK,CAAE,gMAA+LY,UAAW,sBAAqBD,KAAM,kBAAiBE,YAAa,IAAGC,YAAa,IAAGC,YAAa,IAAGC,YAAa,IAAGC,YAAa,EAArU,CAA1B;AACAE,QAAAA,SAAS,CAACM,MAAM,CAACC,IAAP,CAAYC,OAAb,CAAT;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,MAAM,CAACC,IAAP,CAAYC,OAAvC;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCJ,MAAlC,EAA0Cd,KAA1C,EAAiDC,UAAjD;AAEH,OAND,CAOA,OAAOU,OAAP,EAAgB;AACZC,QAAAA,UAAU,CAAC,IAAD,CAAV;AACH;;AACDF,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAfD;;AAgBAG,IAAAA,OAAO;AACV,GAlBQ,EAkBN,CAACX,YAAD,EAAeC,YAAf,EAA6BC,YAA7B,EAA2CC,YAA3C,EAAyDC,YAAzD,CAlBM,CAAT;AAoBA,sBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCK,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADZ,EAGCF,SAAS,gBACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADU,gBAEL;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAgDF,MAAM,CAACY,GAAP,CAAW1B,KAAK,iBAC7D;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,GAAG,EAAEA,KAAK,CAAC2B,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,GAAG,EAAE,oCAAoC3B,KAAK,CAAC4B,WAApD;AAAiE,IAAA,EAAE,EAAE5B,KAAK,CAAC2B,EAA3E;AAA+E,IAAA,GAAG,EAAE3B,KAAK,CAAC6B,KAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA;AAAQ,IAAA,SAAS,EAAC,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CAD6C,CAAhD,CALL,CADJ;AAiBH;;AAED,eAAevB,aAAf","sourcesContent":["import React, { useEffect, useState, useReducer } from 'react';\nimport axios from 'axios';\n\nconst initialState = {\n    loading: true,\n    error: \"\",\n    movie: {}\n}\n\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case \"Fecth_Success\":\n            return {\n                loading: false,\n                movie: action.payload,\n                error: \"\"\n            }\n            case \"Fetch_Error\": \n            return {\n                loading: false,\n                movie: {},\n                error: \"Something went wrong\"\n            }\n            default:\n            return state\n    }\n}\n\nfunction MoodBasedOnly({ genre, randomYear, moodkeyword1, moodkeyword2, moodkeyword3, moodkeyword4, moodkeyword5}) {\n    const [movies, setMovies] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    useEffect(() => {\n        const getData = async() => {\n            setIsError(false);\n            setIsLoading(true);\n\n            try {\n                const result = await axios(`https://api.themoviedb.org/3/discover/movie?api_key=fb1090731e2fd7eea03536049722f122&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${moodkeyword1}|${moodkeyword2}|${moodkeyword3}|${moodkeyword4}|${moodkeyword5}`);\n                setMovies(result.data.results);\n                console.log(\"List Data: \", result.data.results)\n                console.log(\"List Data CEHCEK: \", result, genre, randomYear);\n\n            }\n            catch (isError) {\n                setIsError(true);\n            }\n            setIsLoading(false);\n        }\n        getData();\n    }, [moodkeyword1, moodkeyword2, moodkeyword3, moodkeyword4, moodkeyword5]);\n\n    return (\n        <div className=\"recommended-movies\">\n        {isError && <div>Something went wrong...</div>}\n\n        {isLoading ? (\n        <div>Loading...</div>\n        ) : (<div className=\"recommended-movies-container\"> {movies.map(movie => (\n                <div className=\"movie-list\" key={movie.id}>\n                <img src={\"https://image.tmdb.org/t/p/w500\" + movie.poster_path} id={movie.id} alt={movie.title} />\n                <button className=\"btn-play\"></button>\n                </div>\n            ))}</div>\n            )}\n\n        </div>\n    )\n \n}\n\nexport default MoodBasedOnly"]},"metadata":{},"sourceType":"module"}