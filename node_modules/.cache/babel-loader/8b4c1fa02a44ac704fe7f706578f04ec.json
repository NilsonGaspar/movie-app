{"ast":null,"code":"var _jsxFileName = \"/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Movie from './getMovie';\nimport Trailer from './getTrailer';\nimport Modal from 'react-modal';\nimport MovieList from './MovieList';\nimport RecommendedMovies from './RecommendedMovies';\nimport './App.css';\nModal.setAppElement('#root');\nconst API_KEY = \"fb1090731e2fd7eea03536049722f122\";\nconst IMG_URL_LQ = \"https://image.tmdb.org/t/p/w500\";\nconst IMG_URL_HQ = \"https://image.tmdb.org/t/p/original\";\nconst RECOMMENDED_MOVIES_PATH = \"/discover/movie\";\nconst UPCOMING_PATH = \"/movie/upcoming\";\nconst NOWPLAYING_PATH = \"/movie/now_playing\";\nconst POPULAR_PATH = \"/movie/popular\";\n\nfunction App() {\n  const [trailerList, setTrailerList] = useState([]); // TRAILER LIST\n\n  const [recommendedMovieList, setRecommendedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\n\n  const [moodBasedMovieList, setMoodBasedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\n\n  const [seasonBasedMovieList, setSeasonBasedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\n\n  const [showOverlay, setShowOverlay] = useState(\"overlay\");\n  const [modalIsOpen, setmodalIsOpen] = useState(false);\n  const customStyles = {\n    content: {\n      top: '35%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      width: '40%',\n      transform: 'translate(-50%, -10%)',\n      textAlign: 'center'\n    },\n    overlay: {\n      backgroundColor: 'rgb(0, 0, 0, .5)'\n    }\n  };\n  let genre;\n  let randomYear;\n  let keyword1;\n  let keyword2;\n  let keyword3;\n  let keyword4;\n  let keyword5;\n  let season;\n  let month;\n  let currentDate = new Date(); // variable to store date\n  // ARRAYS\n  // --- ANGRY Keywords ---\n  // fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\n\n  const angryKeywords = [\"1721\", \"779\", \"470\", \"10481\", \"192913\", \"14643\", \"3070\", \"9748\"]; // --- HAPPY Keywords ---\n  //happy 231591, love 9673, sports documentary 159290, nature documentary 221355, happiness 154060, family 18035, magic 2343\n\n  const happyKeywords = [\"231591\", \"9673\", \"159290\", \"221355\", \"154060\", \"18035\", \"2343\"]; // entertainer 1491, happy 231591, comedy 248206\n\n  const tiredKeywords = [\"1491\", \"231591\", \"248206\"]; // --- SPRING Keywords ---\n  // spring break 158054, game 18249, party 8508, young adult 206298\n\n  const springKeywords = [\"158054\", \"18249\", \"8508\", \"206298\"]; // --- SUMMER Keywords ---\n  // summer 13088, summer camp 5767, beach 966, resort 10793, family secrets, teenage girl, family relationships\n\n  const summerKeywords = [\"13088\", \"5767\", \"966\", \"10793\", \"6625\", \"10809\", \"10235\"]; // --- WINTER Keywords ---\n  // winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\n\n  const winterKeywords = [\"1442\", \"10794\", \"207317\", \"186466\"]; // --- AUTUMN Keywords ---\n  // autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\n\n  const autumnKeywords = [\"178883\", \"3335\", \"9694\", \"8087\", \"1299\", \"3133\", \"6152\"]; // RANDOM Keywords Holder\n  // Array to store random keywords\n  // Used to merge two arrays together\n\n  let mergedKeywordsHolder = []; // Selected ramdom number from mergedKeywordsHolder array\n\n  let selectedKeywords = []; // -------\n\n  useEffect(() => {\n    moodBased();\n    seasonBased();\n  }, []); // HAPPY USER MOOD OPTIONS\n\n  const happyMood = async () => {\n    setRandomYear(getRndInteger(2010, 2020));\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n    // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion to filter movies\n\n      filterMovieKeywords();\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = happyKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion to filter movies\n\n      filterMovieKeywords();\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = happyKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion\n\n      filterMovieKeywords();\n    } else if (getSeason() === \"Autumn\") {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = happyKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n\n      filterMovieKeywords(); // Call this fucntion to filter keywords\n    }\n  }; // TIRED USER MOOD OPTIONS\n\n\n  const tiredMood = async () => {\n    genre = \"35|10770|53\"; // CHECK IF IT IS SPRING\n\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = []; // clear the array\n\n      selectedKeywords = []; // clear the array\n\n      mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion to filter movies\n\n      filterMovieKeywords();\n    } else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = []; // clear the array\n\n      selectedKeywords = []; // clear the array\n\n      mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion to filter movies\n\n      filterMovieKeywords();\n    } else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = []; // clear the array\n\n      selectedKeywords = []; // clear the array\n\n      mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion\n\n      filterMovieKeywords();\n    } else if (getSeason() === \"Autumn\") {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = []; // clear the array\n\n      selectedKeywords = []; // clear the array\n\n      mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion to filter movies\n\n      filterMovieKeywords();\n    }\n\n    console.log(\"Tired Mood Keywords: \", mergedKeywordsHolder);\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"Movie List Tired Mood: \", data.results, \"Year: \", randomYear);\n    console.log(\"url: \", response);\n    setRecommendedMovieList(data.results);\n  }; // ANGRY USER MOOD OPTIONS\n\n\n  const angryMood = async () => {\n    genre = \"28|80|10759|12\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = angryKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n\n    filterMovieKeywords();\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"Movie List Angry Mood: \", data.results, \"Year: \", randomYear);\n    setRecommendedMovieList(data.results);\n  }; // USER MOOD OPTIONS\n\n\n  const moodBased = async () => {\n    genre = \"28|35|10759|12|18|9648\";\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n\n    console.log(mergedKeywordsHolder);\n    filterMovieKeywords();\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n    setMoodBasedMovieList(data.results);\n  }; // USER MOOD OPTIONS\n\n\n  const seasonBased = async () => {\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = angryKeywords.concat(springKeywords);\n    ; // merge two arrays together into a new one called mergedKeywordsHolder\n\n    console.log(\"Seaon Based Keywords: \", mergedKeywordsHolder);\n    filterMovieKeywords();\n    const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n    const data = await response.json();\n    console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n    setSeasonBasedMovieList(data.results);\n  }; // FUNCTION TO FILTER ANGRY MOOD MOVIES\n\n\n  function filterMovieKeywords1() {\n    // loop to get 6 random values from array angryKeywords and store it in the array randomKeywordsHolder\n    for (var i = 0; i < 5; i++) {\n      var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n\n      while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) {\n        // check if the last value is not the same as the new one\n        pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)];\n      }\n\n      selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n    } // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n\n\n    setKeyword11(selectedKeywords[0]);\n    setKeyword22(selectedKeywords[1]);\n    setKeyword33(selectedKeywords[2]);\n    setKeyword44(selectedKeywords[3]);\n    setKeyword55(selectedKeywords[4]);\n    console.log(\"selected keys \", selectedKeywords);\n    console.log(\"keywords111111 \", keyword11, keyword22, keyword33, keyword44, keyword55);\n  } // FUNCTION TO FILTER ANGRY MOOD MOVIES\n\n\n  function filterMovieKeywords() {\n    // loop to get 6 random values from array angryKeywords and store it in the array randomKeywordsHolder\n    for (var i = 0; i < 5; i++) {\n      var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n\n      while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) {\n        // check if the last value is not the same as the new one\n        pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random() * mergedKeywordsHolder.length)];\n      }\n\n      selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n    } // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n\n\n    keyword1 = selectedKeywords[0];\n    keyword2 = selectedKeywords[1];\n    keyword3 = selectedKeywords[2];\n    keyword4 = selectedKeywords[3];\n    keyword5 = selectedKeywords[4]; // Generate random year between 2010 and 2020\n\n    randomYear = getRndInteger(2010, 2020);\n    console.log(\"selected keys \", selectedKeywords);\n    console.log(\"keywords \", keyword1, keyword2, keyword3, keyword4, keyword5);\n  } // FUNCTION TO GENERATE RANDOM YEAR\n\n\n  function getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } // GET VIDEO TRAILER\n\n\n  document.onclick = function (event) {\n    // check for any event that happens in the page\n    const target = event.target; // store the content from the \"event\" into the variable target\n\n    if (target.tagName.toLowerCase() === \"img\") {\n      // change the image name to lower case and check if it is equal to \"img\"\n      console.log(target);\n      const movie_id = target.attributes.id.value; // get movie ID\n\n      console.log(\"Movie ID: \", movie_id);\n\n      const getTrailer = async () => {\n        const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n\n        const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n        const data = await response.json();\n        console.log(\"Trailer List: \", data.results);\n        setTrailerList(data.results); // check if there is a trailer available\n\n        if (data.results.length === 0) {\n          console.log(\"No trailer found\");\n          setmodalIsOpen(true);\n          return;\n        }\n      };\n\n      getTrailer();\n      setShowOverlay(\"overlay active\");\n    }\n  }; // GET CURRENT MONTH\n\n\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  month = months[currentDate.getMonth()];\n  console.log(\"Month: \" + month); // GET THE RIGHT SEASON\n\n  function getSeason() {\n    if (month === \"December\" || month === \"January\" || month === \"February\") {\n      //console.log(\"Winter\");\n      season = \"Winter\";\n    } else if (month === \"March\" || month === \"April\" || month === \"May\") {\n      //console.log(\"Spring\");\n      season = \"Spring\";\n    } else if (month === \"June\" || month === \"July\" || month === \"August\") {\n      //console.log(\"Summer\");\n      season = \"Summer\";\n    } else {\n      //console.log(\"Autumn\");\n      season = \"Autumn\";\n    }\n\n    return season;\n  }\n\n  const [genre1, setGenre1] = useState(\"\");\n  const [randomYear1, setRandomYear1] = useState(\"2010\");\n  const [isUserMoodActive, setIsUserMoodActive] = useState(false);\n  const [keyword11, setKeyword11] = useState(\"\");\n  const [keyword22, setKeyword22] = useState(\"\");\n  const [keyword33, setKeyword33] = useState(\"\");\n  const [keyword44, setKeyword44] = useState(\"\");\n  const [keyword55, setKeyword55] = useState(\"\");\n\n  const happyMoodTest = () => {\n    setGenre1(\"28\");\n    setRandomYear1(getRndInteger(2010, 2020));\n    mergedKeywordsHolder = []; // clear the array\n\n    selectedKeywords = []; // clear the array\n\n    mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion to filter movies\n\n    filterMovieKeywords1();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: showOverlay,\n    onClick: () => {\n      setShowOverlay(\"overlay\");\n      setTrailerList([]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: () => {\n      setmodalIsOpen(false);\n      setShowOverlay(\"overlay\");\n    },\n    style: customStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }\n  }, \"SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE\")), recommendedMovieList[0] && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spotlight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mood-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"logo-link\",\n    href: \"index.html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }\n  }, \"fastMovie\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-angry\",\n    onClick: () => angryMood(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 9\n    }\n  }, \"Angry\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-tired\",\n    onClick: () => tiredMood(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 9\n    }\n  }, \"Tired\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-sad\",\n    onClick: () => tiredMood(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 9\n    }\n  }, \"Sad\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-happy\",\n    onClick: () => {\n      happyMoodTest();\n      setIsUserMoodActive(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }\n  }, \"Happy\")))), isUserMoodActive && /*#__PURE__*/React.createElement(RecommendedMovies, {\n    genre1: genre1,\n    randomYear1: randomYear1,\n    keyword11: keyword11,\n    keyword22: keyword22,\n    keyword33: keyword33,\n    keyword55: keyword44,\n    keyword55: keyword55,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ads\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require('./img/smallads.gif'),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 5\n    }\n  }, \"Recommended For You\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommended-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 5\n    }\n  }, recommendedMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL_LQ + movie.poster_path,\n    backdrop: IMG_URL_LQ + movie.backdrop_path //rating= {movie.vote_average}\n    //title= {movie.title} \n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }\n  }, \"Up Coming\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL_PATH: \"/movie/upcoming\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }\n  }, \"For Your Mood\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mood-based-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }\n  }, moodBasedMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL_LQ + movie.poster_path //rating= {movie.vote_average}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }\n  }, \"Now Playing\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL_PATH: \"/movie/now_playing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ads\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require('./img/bigads.jpg'),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }\n  }, \"Season Based\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"season-based-movies-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }\n  }, seasonBasedMovieList.map(movie => /*#__PURE__*/React.createElement(Movie, {\n    key: movie.id,\n    movie_id: movie.id,\n    poster: IMG_URL_LQ + movie.poster_path //rating= {movie.vote_average}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }\n  }, \"Popular Movies\"), /*#__PURE__*/React.createElement(MovieList, {\n    URL_PATH: \"/movie/popular\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trailer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }\n  }, trailerList.slice(0, 1).map(trailer => /*#__PURE__*/React.createElement(Trailer, {\n    key: trailer.key,\n    trailer_key: trailer.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 9\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nilsongaspar/Desktop/My Apps/fast-movie-v4/src/App.js"],"names":["React","useEffect","useState","Movie","Trailer","Modal","MovieList","RecommendedMovies","setAppElement","API_KEY","IMG_URL_LQ","IMG_URL_HQ","RECOMMENDED_MOVIES_PATH","UPCOMING_PATH","NOWPLAYING_PATH","POPULAR_PATH","App","trailerList","setTrailerList","recommendedMovieList","setRecommendedMovieList","moodBasedMovieList","setMoodBasedMovieList","seasonBasedMovieList","setSeasonBasedMovieList","showOverlay","setShowOverlay","modalIsOpen","setmodalIsOpen","customStyles","content","top","left","right","bottom","marginRight","width","transform","textAlign","overlay","backgroundColor","genre","randomYear","keyword1","keyword2","keyword3","keyword4","keyword5","season","month","currentDate","Date","angryKeywords","happyKeywords","tiredKeywords","springKeywords","summerKeywords","winterKeywords","autumnKeywords","mergedKeywordsHolder","selectedKeywords","moodBased","seasonBased","happyMood","setRandomYear","getRndInteger","getSeason","console","log","concat","filterMovieKeywords","tiredMood","response","fetch","data","json","results","angryMood","filterMovieKeywords1","i","pickedKeyword","Math","floor","random","length","lastIndexOf","push","setKeyword11","setKeyword22","setKeyword33","setKeyword44","setKeyword55","keyword11","keyword22","keyword33","keyword44","keyword55","min","max","document","onclick","event","target","tagName","toLowerCase","movie_id","attributes","id","value","getTrailer","TRAILER_PATH","months","getMonth","genre1","setGenre1","randomYear1","setRandomYear1","isUserMoodActive","setIsUserMoodActive","happyMoodTest","require","map","movie","poster_path","backdrop_path","slice","trailer","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Movie from './getMovie';\nimport Trailer from './getTrailer';\nimport Modal from 'react-modal';\nimport MovieList from './MovieList';\nimport RecommendedMovies from './RecommendedMovies';\n\nimport './App.css';\n\n\n\nModal.setAppElement('#root');\n\nconst API_KEY = \"fb1090731e2fd7eea03536049722f122\";\nconst IMG_URL_LQ = \"https://image.tmdb.org/t/p/w500\";\nconst IMG_URL_HQ = \"https://image.tmdb.org/t/p/original\";\nconst RECOMMENDED_MOVIES_PATH = \"/discover/movie\";\nconst UPCOMING_PATH = \"/movie/upcoming\";\nconst NOWPLAYING_PATH = \"/movie/now_playing\";\nconst POPULAR_PATH = \"/movie/popular\";\n\nfunction App() {\n\nconst [trailerList, setTrailerList] = useState([]); // TRAILER LIST\nconst [recommendedMovieList, setRecommendedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\nconst [moodBasedMovieList, setMoodBasedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\nconst [seasonBasedMovieList, setSeasonBasedMovieList] = useState([]); // RECOMMENDED MOVIE LIST\n\nconst [showOverlay, setShowOverlay] = useState(\"overlay\");\nconst [modalIsOpen, setmodalIsOpen] = useState(false);\n\nconst customStyles = {\n  content: {\n    top: '35%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    width: '40%',\n    transform: 'translate(-50%, -10%)',\n    textAlign: 'center',\n  },\n  overlay: {\n    backgroundColor: 'rgb(0, 0, 0, .5)',\n  },\n};\n\n\nlet genre;\nlet randomYear;\nlet keyword1;\nlet keyword2;\nlet keyword3;\nlet keyword4;\nlet keyword5;\n\nlet season;\nlet month;\n\nlet currentDate = new Date(); // variable to store date\n\n// ARRAYS\n\n// --- ANGRY Keywords ---\n// fight 1721, martial arts 779, spy 470, tension 10481, warrior 192913, battle 14643, mercenary 3070, revenge 9748\nconst angryKeywords = [\"1721\",\"779\",\"470\",\"10481\",\"192913\",\"14643\",\"3070\",\"9748\"];\n// --- HAPPY Keywords ---\n//happy 231591, love 9673, sports documentary 159290, nature documentary 221355, happiness 154060, family 18035, magic 2343\nconst happyKeywords = [\"231591\",\"9673\",\"159290\",\"221355\",\"154060\",\"18035\",\"2343\"];\n\n// entertainer 1491, happy 231591, comedy 248206\nconst tiredKeywords = [\"1491\",\"231591\",\"248206\"];\n\n// --- SPRING Keywords ---\n// spring break 158054, game 18249, party 8508, young adult 206298\nconst springKeywords = [\"158054\",\"18249\",\"8508\",\"206298\"];\n\n// --- SUMMER Keywords ---\n// summer 13088, summer camp 5767, beach 966, resort 10793, family secrets, teenage girl, family relationships\nconst summerKeywords = [\"13088\",\"5767\",\"966\",\"10793\",\"6625\",\"10809\",\"10235\"];\n\n// --- WINTER Keywords ---\n// winter 1442, snow 10794, christmas 207317, christmas party 1441, christmas horror 186466\nconst winterKeywords = [\"1442\",\"10794\",\"207317\",\"186466\"];\n\n// --- AUTUMN Keywords ---\n// autumn 178883, halloween 3335, halloween party 9694, horror 8087, monster 1299, vampire 3133, supernatural 6152\nconst autumnKeywords = [\"178883\",\"3335\",\"9694\",\"8087\",\"1299\",\"3133\",\"6152\"];\n\n// RANDOM Keywords Holder\n// Array to store random keywords\n// Used to merge two arrays together\nlet mergedKeywordsHolder = []; \n\n// Selected ramdom number from mergedKeywordsHolder array\nlet selectedKeywords = [];\n\n// -------\n\n\nuseEffect(() => {\n  moodBased()\n  seasonBased()\n}, []);\n\n\n// HAPPY USER MOOD OPTIONS\nconst happyMood = async () => {\n\n    setRandomYear(getRndInteger(2010, 2020))\n    mergedKeywordsHolder = []; // clear the array\n    selectedKeywords = []; // clear the array\n\n  // CHECK IF IT IS SPRING\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion to filter movies\n      filterMovieKeywords();\n    }\n    else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = happyKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion to filter movies\n      filterMovieKeywords();\n    }\n    else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = happyKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion\n      filterMovieKeywords();\n    }\n    else if (getSeason() === \"Autumn\") {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = happyKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      filterMovieKeywords();   // Call this fucntion to filter keywords\n    }\n}\n\n// TIRED USER MOOD OPTIONS\nconst tiredMood = async () => {\n  genre = \"35|10770|53\";\n  // CHECK IF IT IS SPRING\n    if (getSeason() === \"Spring\") {\n      console.log(\"It's Spring\");\n      mergedKeywordsHolder = []; // clear the array\n      selectedKeywords = []; // clear the array\n      mergedKeywordsHolder = tiredKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion to filter movies\n      filterMovieKeywords();\n    }\n    else if (getSeason() === \"Summer\") {\n      console.log(\"It's Summer\");\n      mergedKeywordsHolder = []; // clear the array\n      selectedKeywords = []; // clear the array\n      mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n    // Call this fucntion to filter movies\n      filterMovieKeywords();\n    }\n    else if (getSeason() === \"Winter\") {\n      console.log(\"It's winter\");\n      mergedKeywordsHolder = []; // clear the array\n      selectedKeywords = []; // clear the array\n      mergedKeywordsHolder = tiredKeywords.concat(winterKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion\n      filterMovieKeywords();\n    }\n    else if (getSeason() === \"Autumn\") {\n      console.log(\"It's Autumn\");\n      mergedKeywordsHolder = []; // clear the array\n      selectedKeywords = []; // clear the array\n      mergedKeywordsHolder = tiredKeywords.concat(autumnKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n      // Call this fucntion to filter movies\n      filterMovieKeywords();\n    } \n  console.log(\"Tired Mood Keywords: \", mergedKeywordsHolder);\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"Movie List Tired Mood: \", data.results, \"Year: \", randomYear);\n  console.log(\"url: \", response);\n  setRecommendedMovieList(data.results);\n\n}\n\n\n// ANGRY USER MOOD OPTIONS\nconst angryMood = async () => {\n\n  genre = \"28|80|10759|12\";\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n  mergedKeywordsHolder = angryKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  filterMovieKeywords()\n\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"Movie List Angry Mood: \", data.results, \"Year: \", randomYear);\n  setRecommendedMovieList(data.results);\n\n}\n\n// USER MOOD OPTIONS\nconst moodBased = async () => {\n  genre = \"28|35|10759|12|18|9648\";\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n  mergedKeywordsHolder = happyKeywords.concat(springKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n  console.log(mergedKeywordsHolder);\n\n  filterMovieKeywords()\n\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_genres=${genre}&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n  setMoodBasedMovieList(data.results);\n}\n\n// USER MOOD OPTIONS\nconst seasonBased = async () => {\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n  mergedKeywordsHolder = angryKeywords.concat(springKeywords); ; // merge two arrays together into a new one called mergedKeywordsHolder\n  console.log(\"Seaon Based Keywords: \", mergedKeywordsHolder);\n  filterMovieKeywords()\n  const response = await fetch(`https://api.themoviedb.org/3${RECOMMENDED_MOVIES_PATH}?api_key=${API_KEY}&language=en-GB&sort_by=popularity.desc&include_adult=false&include_video=false&primary_release_date.gte=${randomYear}-01-01&with_keywords=${keyword1}|${keyword2}|${keyword3}|${keyword4}|${keyword5}`);\n  const data = await response.json();\n  console.log(\"Movie List Happy Mood: \", data.results, \"Year: \", randomYear);\n  setSeasonBasedMovieList(data.results);\n}\n\n\n\n\n\n// FUNCTION TO FILTER ANGRY MOOD MOVIES\nfunction filterMovieKeywords1() {\n  // loop to get 6 random values from array angryKeywords and store it in the array randomKeywordsHolder\n  for (var i = 0; i < 5; i++) { \n    var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random()*mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n    while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) { // check if the last value is not the same as the new one\n      pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random()*mergedKeywordsHolder.length)];\n    }\n    selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n}\n  // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n  setKeyword11(selectedKeywords[0]);\n  setKeyword22(selectedKeywords[1]);\n  setKeyword33(selectedKeywords[2]);\n  setKeyword44(selectedKeywords[3]);\n  setKeyword55(selectedKeywords[4]);\n\nconsole.log(\"selected keys \", selectedKeywords)\n console.log(\"keywords111111 \",keyword11, keyword22, keyword33, keyword44,keyword55)\n}\n\n// FUNCTION TO FILTER ANGRY MOOD MOVIES\nfunction filterMovieKeywords() {\n  // loop to get 6 random values from array angryKeywords and store it in the array randomKeywordsHolder\n  for (var i = 0; i < 5; i++) { \n    var pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random()*mergedKeywordsHolder.length)]; // store the random value from the array angryKeywords into the variable pickedKeyword\n    while (selectedKeywords.lastIndexOf(pickedKeyword) !== -1) { // check if the last value is not the same as the new one\n      pickedKeyword = mergedKeywordsHolder[Math.floor(Math.random()*mergedKeywordsHolder.length)];\n    }\n    selectedKeywords.push(pickedKeyword); // adds the random value at the end of the array randomKeywordsHolder\n}\n  // assign keywords from randomKeywordsHolder array to variable keyword1, keyword2 etc\n  keyword1 = selectedKeywords[0];\n  keyword2 = selectedKeywords[1];\n  keyword3 = selectedKeywords[2];\n  keyword4 = selectedKeywords[3];\n  keyword5 = selectedKeywords[4];\n\n  // Generate random year between 2010 and 2020\nrandomYear = getRndInteger(2010, 2020);\nconsole.log(\"selected keys \", selectedKeywords)\n console.log(\"keywords \",keyword1, keyword2, keyword3, keyword4,keyword5)\n}\n\n// FUNCTION TO GENERATE RANDOM YEAR\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n// GET VIDEO TRAILER\ndocument.onclick = function (event) { // check for any event that happens in the page\n  const target = event.target; // store the content from the \"event\" into the variable target\n  if (target.tagName.toLowerCase() === \"img\") { // change the image name to lower case and check if it is equal to \"img\"\n  console.log(target);\n  const movie_id = target.attributes.id.value; // get movie ID\n  console.log(\"Movie ID: \", movie_id);\n  \n  const getTrailer = async () => {\n    const TRAILER_PATH = `/movie/${movie_id}/videos`; // create url to search for movie id\n    const response = await fetch(`https://api.themoviedb.org/3${TRAILER_PATH}?api_key=${API_KEY}&language=en-GB`);\n    const data = await response.json();\n    console.log(\"Trailer List: \", data.results);\n    setTrailerList(data.results);\n\n  // check if there is a trailer available\n  if (data.results.length === 0) {\n    console.log(\"No trailer found\");\n    setmodalIsOpen(true);\n    \n  return\n  }\n\n  }\n  getTrailer();\n  setShowOverlay(\"overlay active\");\n  }\n}\n\n// GET CURRENT MONTH\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nmonth = months[currentDate.getMonth()];\nconsole.log(\"Month: \" + month);\n\n// GET THE RIGHT SEASON\nfunction getSeason() {\n  if (month === \"December\" || month === \"January\" || month === \"February\") {\n    //console.log(\"Winter\");\n    season = \"Winter\";\n  }\n  else if (month === \"March\" || month === \"April\" || month === \"May\") {\n    //console.log(\"Spring\");\n    season = \"Spring\";\n  }\n  else if (month === \"June\" || month === \"July\" || month === \"August\") {\n    //console.log(\"Summer\");\n    season = \"Summer\";\n  }\n  else {\n    //console.log(\"Autumn\");\n    season = \"Autumn\";\n  }\n  return season;\n}\n\nconst [genre1, setGenre1] = useState(\"\");\nconst [randomYear1, setRandomYear1] = useState(\"2010\");\nconst [isUserMoodActive, setIsUserMoodActive] = useState(false);\n\nconst [keyword11, setKeyword11] = useState(\"\");\nconst [keyword22, setKeyword22] = useState(\"\");\nconst [keyword33, setKeyword33] = useState(\"\");\nconst [keyword44, setKeyword44] = useState(\"\");\nconst [keyword55, setKeyword55] = useState(\"\");\n\n\n\n\nconst happyMoodTest =() => {\n  setGenre1(\"28\");\n  setRandomYear1(getRndInteger(2010, 2020))\n  mergedKeywordsHolder = []; // clear the array\n  selectedKeywords = []; // clear the array\n  mergedKeywordsHolder = tiredKeywords.concat(summerKeywords); // merge two arrays together into a new one called mergedKeywordsHolder\n// Call this fucntion to filter movies\n  filterMovieKeywords1();\n\n  \n\n}\n\n\nreturn (\n  <div className=\"App\">\n\n    <div className={showOverlay} onClick={() => {setShowOverlay(\"overlay\"); setTrailerList([]);}}></div>\n\n  \n    <Modal isOpen={modalIsOpen} onRequestClose={() => {setmodalIsOpen(false); setShowOverlay(\"overlay\");}} style={customStyles}>\n      <p>SORRY, NO TRAILER AVAILABLE FOR THIS MOVIE</p>\n    </Modal>\n\n\n      {recommendedMovieList[0] &&\n        <div className=\"spotlight\">\n        <h1 className=\"logo\">\n          \n        <div className=\"mood-options\">\n        <a className=\"logo-link\" href=\"index.html\">fastMovie</a>\n        <button className=\"btn-angry\" onClick={() => angryMood()}>Angry</button>\n        <button className=\"btn-tired\" onClick={() => tiredMood()}>Tired</button>\n        <button className=\"btn-sad\" onClick={() => tiredMood()}>Sad</button>\n        <button className=\"btn-happy\" onClick={() => {happyMoodTest();  setIsUserMoodActive(true) }}>Happy</button>\n        </div>\n        </h1>\n        \n        {//<img src={IMG_URL_HQ + recommendedMovieList[0].backdrop_path} id={recommendedMovieList[0].id} alt=\"\"/>  \n}\n      </div> \n      }\n\n      {isUserMoodActive && \n      <RecommendedMovies genre1={genre1} randomYear1={randomYear1} keyword11={keyword11} keyword22={keyword22} keyword33={keyword33} keyword55={keyword44} keyword55={keyword55}/>\n      }\n\n\n\n      <div className=\"ads\">\n      <img src={require('./img/smallads.gif')} alt=\"\" />\n      </div>\n\n    <h3>Recommended For You</h3>\n    <div className=\"recommended-movies-container\">\n      {recommendedMovieList.map(movie => (\n        <Movie \n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL_LQ + movie.poster_path}\n        backdrop={IMG_URL_LQ + movie.backdrop_path}\n        //rating= {movie.vote_average}\n        //title= {movie.title} \n        />\n      ))}\n      </div> \n\n\n      <h3>Up Coming</h3>\n    <MovieList URL_PATH=\"/movie/upcoming\"/>\n\n      <h3>For Your Mood</h3>\n      <div className=\"mood-based-movies-container\">\n      {moodBasedMovieList.map(movie => (\n        <Movie\n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL_LQ + movie.poster_path}\n        //rating= {movie.vote_average}\n         />\n      ))}\n      </div>\n\n      <h3>Now Playing</h3>\n    <MovieList URL_PATH=\"/movie/now_playing\"/>\n\n\n      <div className=\"ads\">\n      <img src={require('./img/bigads.jpg')} alt=\"\" />\n      </div>\n\n      <h3>Season Based</h3>\n      <div className=\"season-based-movies-container\">\n      {seasonBasedMovieList.map(movie => (\n        <Movie\n        key= {movie.id}\n        movie_id= {movie.id}\n        poster= {IMG_URL_LQ + movie.poster_path}\n        //rating= {movie.vote_average}\n         />\n      ))}\n      </div>\n\n      <h3>Popular Movies</h3>\n      <MovieList URL_PATH=\"/movie/popular\"/>\n\n\n      <div className=\"trailer-container\">    \n      {trailerList.slice(0, 1).map(trailer => (\n        <Trailer\n        key= {trailer.key}\n        trailer_key= {trailer.key}\n      />\n      ))}\n      </div>\n\n  </div>\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}